/**
 * jQuery 1.9.x+
 *
 * 一些基于jQuery的修补/扩展功能
 *
 * hydra为插件代号, 意为九头蛇怪, 来源希腊语. 九头蛇怪在世界许多文化中均有出现, 如古希腊神话, 中国神话, 日本神话, 波斯古经, 圣经,
 * 非洲传说等
 *
 */
(function($) {
	function BrowserDetect() {
		var b = {},
			ua = navigator.userAgent.toLowerCase();
		var matched = function() {
				var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
				return {
					browser: match[1] || "",
					version: match[2] || "0"
				}

			}();
		if (matched.browser) {
			b[matched.browser] = true;
			b.version = matched.version
		}
		if (b.chrome) {
			b.webkit = true
		} else {
			if (b.webkit) {
				b.safari = true;
				if (/version\/(\S+)/i.test(ua)) {
					b.version = RegExp["$1"]
				} else {
					var _version = "1";
					if (Number(b.version) < 100) {
						_version = "1"
					} else {
						if (Number(b.version) < 312) {
							_version = "1.2"
						} else {
							if (Number(b.version) < 412) {
								_version = "1.3"
							} else {
								_version = "2"
							}
						}
					}
					b.version = _version
				}
			} else {
				if (b.mozilla) {
					if (/FireFox\/(\S+)/i.test(ua)) {
						b.version = RegExp["$1"]
					} else {
						if ( !! (ua.match(/trident/) && (ua.match(/rv 11/) || ua.match(/rv:11/)))) {
							delete b.mozilla;
							b.msie = true;
							b.version = "11.0"
						}
					}
				}
			}
		}
		return b
	}
	$.browser = new BrowserDetect();

	function DateUtil() {}
	$.extend(
	DateUtil.prototype, {
		masks: {
			shortDate: "m/d/yy",
			mediumDate: "mmm d, yyyy",
			longDate: "mmmm d, yyyy",
			fullDate: "dddd, mmmm d, yyyy",
			shortTime: "h:MM T",
			mediumTime: "h:MM:ss T",
			longTime: "h:MM:ss T Z",
			isoDate: "yyyy-mm-dd",
			isoTime: "HH:MM:ss",
			isoHourTime: "yyyy-mm-dd HH",
			isoDateTime: "yyyy-mm-dd HH:MM:ss",
			isoFullDateTime: "yyyy mmm ddd HH:MM:ss",
			isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
		},
		i18n: {
			shortDayNames: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
			dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
			shortMonthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
			monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			traditionMonthNames: ["首阳", "绀香", "莺时", "槐序", "鸣蜩", "季夏", "兰秋", "南宫", "菊月", "子春", "葭月", "冰月"]
		},
		dateFormat: function(date, mask, utc) {
			var $date = $.date;
			if (arguments.length === 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
				mask = date;
				date = undefined
			}
			date = date ? new Date(date) : new Date;
			if (isNaN(date)) {
				$.error("invalid date")
			}
			mask = String($date.masks[mask] || mask || $date.masks["isoDateTime"]);
			if (mask.slice(0, 4) === "UTC:") {
				mask = mask.slice(4);
				utc = true
			}
			var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsT])\1?|[LloZ]|"[^"]*"|'[^']*'/g,
				timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
				timezoneClip = /[^-+\dA-Z]/g;
			var _ = utc ? "getUTC" : "get",
				d = date[_ + "Date"](),
				D = date[_ + "Day"](),
				m = date[_ + "Month"](),
				y = date[_ + "FullYear"](),
				H = date[_ + "Hours"](),
				M = date[_ + "Minutes"](),
				s = date[_ + "Seconds"](),
				L = date[_ + "Milliseconds"](),
				o = utc ? 0 : date.getTimezoneOffset(),
				flags = {
					d: d,
					dd: $date._pad(d),
					ddd: $date.i18n.shortDayNames[D],
					dddd: $date.i18n.dayNames[D],
					m: m + 1,
					mm: $date._pad(m + 1),
					mmm: $date.i18n.shortMonthNames[m],
					mmmm: $date.i18n.monthNames[m],
					yy: String(y).slice(2),
					yyyy: y,
					h: H % 12 || 12,
					hh: $date._pad(H % 12 || 12),
					H: H,
					HH: $date._pad(H),
					M: M,
					MM: $date._pad(M),
					s: s,
					ss: $date._pad(s),
					l: $date._pad(L, 3),
					L: $date._pad(L > 99 ? Math.round(L / 10) : L),
					T: H < 12 ? "上午" : "下午",
					Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
					o: (o > 0 ? "-" : "+") + $date._pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4)
				};
			return mask.replace(token, function($0) {
				return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1)
			})
		},
		long2Date: function(d) {
			var date = new Date();
			if ($.type(d) === "string" || $.type(d) === "number") {
				date.setTime(d)
			} else {
				if ($.type(d) === "date") {
					date = d
				}
			}
			return date
		},
		add: function(d, mode, num) {
			var date = new Date(d.getTime());
			if (!/[\-]?[\d]+/g.test(num)) {
				return d
			}
			mode = mode || "D";
			switch (mode.toUpperCase()) {
			case "Y":
				date.setYear(date.getYear() + num);
				break;
			case "M":
				date.setMonth(date.getMonth() + num);
				break;
			case "W":
				date.setDate(date.getDate() + num * 7);
				break;
			case "D":
				date.setDate(date.getDate() + num);
				break;
			case "H":
				date.setHours(date.getHours() + num);
				break;
			case "MI":
				date.setMinutes(date.getMinutes() + num);
				break;
			case "S":
				date.setSeconds(date.getSeconds() + num);
				break
			}
			return date
		},
		runtime: function(t) {
			if (!t) {
				return null
			}
			if ($.type(t) === "number") {
				t = t
			} else {
				if ($.type(t) === "string") {
					t = Number(t)
				} else {
					return {}
				}
			}
			var _time = {};
			_time.ms = parseInt(t % 1000);
			t = t / 1000;
			_time.dd = parseInt(t / 60 / 60 / 24);
			t = t - _time.dd * 60 * 60 * 24;
			_time.hh = parseInt(t / 60 / 60);
			t = t - _time.hh * 60 * 60;
			_time.mi = parseInt(t / 60);
			t = t - _time.mi * 60;
			_time.ss = parseInt(t);
			return _time
		},
		_pad: function(val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) {
				val = "0" + val
			}
			return val
		}
	});
	$.date = new DateUtil();

	function ProjectUtil() {
		pathname = window.location.pathname;
		var pname = "";
		var topologyName = "";
		if (pathname && pathname.length > 0) {
			var patharr = pathname.split("/");
			pname = patharr.length < 4 ? "" : patharr[1];
			var fromIndex, toIndex;
			toIndex = pathname.lastIndexOf("/");
			fromIndex = pathname.substring(0, toIndex).lastIndexOf("/");
			topologyName = pathname.substring(fromIndex + 1, toIndex)
		}
		var path = pname ? "/" + pname : "";
		return {
			name: pname,
			path: path,
			topologyName: topologyName,
			topologyPath: path + "/" + topologyName
		}
	}
	$.project = new ProjectUtil();

	function XMLUtil() {}
	$.extend(XMLUtil.prototype, {
		load: function(url) {
			var xmlDoc = null;
			if (!url || $.trim(url) === "") {
				return null
			}
			if ($.browser.msie) {
				xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
				xmlDoc.async = false;
				xmlDoc.load(url);
				xmlDoc.setProperty("SelectionLanguage", "XPath")
			} else {
				xmlDoc = document.implementation.createDocument("", "", null);
				var xhr = new XMLHttpRequest();
				xhr.open("GET", url, false);
				xhr.send(null);
				xmlDoc = xhr.responseXML
			}
			return xmlDoc
		},
		text: function(node) {
			var _text;
			if (!node) {
				return ""
			}
			if ($.browser.msie) {
				_text = node.text
			} else {
				_text = node.textContent
			}
			_text = !! _text ? _text : node.nodeValue;
			return _text
		},
		transform: function(xmlDoc, xslDoc) {
			if (!xmlDoc || !xslDoc) {
				return ""
			}
			if ($.browser.msie) {
				return xmlDoc.transformNode(xslDoc)
			} else {
				var xsltProcessor = new XSLTProcessor();
				xsltProcessor.importStylesheet(xslDoc);
				var xmls = new XMLSerializer();
				return xmls.serializeToString(xsltProcessor.transformToDocument(xmlDoc))
			}
		}
	});
	$.xml = new XMLUtil();
	if (!$.browser.msie || ($.browser.msie && Number($.browser.version.split(".")[0]) > 10)) {
		XMLDocument.prototype.selectSingleNode = Element.prototype.selectSingleNode = function(
		xpath) {
			var node = this.selectNodes(xpath);
			if (!node || node.length < 1) {
				return null
			}
			return node[0]
		};
		XMLDocument.prototype.selectNodes = Element.prototype.selectNodes = function(
		xpath) {
			var nodes = [];
			var res;
			var majorVer = Number($.browser.version.split(".")[0]);
			if (!$.browser.msie) {
				var xpe = new XPathEvaluator();
				var nsResolver = xpe.createNSResolver(this.ownerDocument == null ? this.documentElement : this.ownerDocument.documentElement);
				var result = xpe.evaluate(xpath, this, nsResolver, 0, null);
				while (res = result.iterateNext()) {
					nodes.push(res)
				}
			} else {
				var exp = xpath.replace(/\//g, " ");
				var splExps = exp.split("contains(");
				if (splExps.length > 1) {
					splExps.splice(0, 1);
					for (var i = 0, len = splExps.length; i < len; i++) {
						var pathExp = "contains(" + splExps[i].substring(0, splExps[i].indexOf("')") + 2);
						var cssExp = splExps[i].substring(1, splExps[i].indexOf("')") + 1).replace(/, \'|,\'/g, "*='");
						exp = exp.replace(pathExp, cssExp)
					}
				}
				exp = exp.replace(/@/g, "").replace(/ and /gi, "][");
				var result = this.querySelectorAll(exp);
				nodes = Array.prototype.slice.call(result, 0)
			}
			return nodes
		}
	}

	function StringUtil() {
		this.escape = /["\\\x00-\x1f\x7f-\x9f]/g;
		this.meta = {
			"\b": "\\b",
			"\t": "\\t",
			"\n": "\\n",
			"\f": "\\f",
			"\r": "\\r",
			'"': '\\"',
			"\\": "\\\\"
		}
	}
	$.extend(
	StringUtil.prototype, {
		blank: function(str) {
			return /^\s*$/.test(str || " ")
		},
		escapeHTML: function(str) {
			str = str.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split('"').join("&quot;");
			return str
		},
		quoteString: function(str) {
			if (str.match(this.escape)) {
				var _this = this;
				return str.replace(_this.escape, function(a) {
					var c = _this.meta[a];
					if (typeof c === "string") {
						return c
					}
					c = a.charCodeAt();
					return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
				})
			}
			return str
		},
		queryParams: function(url) {
			var paramsArr = url.substring(url.indexOf("?") + 1).split("#")[0].split("&"),
				params = {},
				key = null,
				value = null,
				pair = null;
			for (var i = 0, len = paramsArr.length; i < len; i++) {
				pair = paramsArr[i].split("=");
				key = decodeURIComponent(pair[0]);
				value = pair[1] ? decodeURIComponent(pair[1]) : undefined;
				if (params[key]) {
					if (typeof params[key] === "string") {
						params[key] = [params[key]]
					}
					params[key].push(value)
				} else {
					params[key] = value
				}
			}
			return params
		}
	});
	$.string = new StringUtil();
	$.objAttrLength = function(obj) {
		if (obj == null) {
			return 0
		}
		var len = 0;
		for (var i in obj) {
			if (obj.hasOwnProperty(i)) {
				len++
			}
		}
		return len
	};
	$.toJSON = typeof JSON === "object" && JSON.stringify ? JSON.stringify : function(o) {
		if (o === null) {
			return "null"
		}
		var pairs, k, name, val, type = $.type(o);
		if (type === "undefined") {
			return undefined
		}
		if (type === "number" || type === "boolean") {
			return String(o)
		}
		if (type === "string") {
			return '"' + $.string.quoteString(o) + '"'
		}
		if (typeof o.toJSON === "function") {
			return $.toJSON(o.toJSON())
		}
		if (type === "date") {
			var month = o.getUTCMonth() + 1,
				day = o.getUTCDate(),
				year = o.getUTCFullYear(),
				hours = o.getUTCHours(),
				minutes = o.getUTCMinutes(),
				seconds = o.getUTCSeconds(),
				milli = o.getUTCMilliseconds();
			if (month < 10) {
				month = "0" + month
			}
			if (day < 10) {
				day = "0" + day
			}
			if (hours < 10) {
				hours = "0" + hours
			}
			if (minutes < 10) {
				minutes = "0" + minutes
			}
			if (seconds < 10) {
				seconds = "0" + seconds
			}
			if (milli < 100) {
				milli = "0" + milli
			}
			if (milli < 10) {
				milli = "0" + milli
			}
			return '"' + year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds + "." + milli + 'Z"'
		}
		pairs = [];
		if ($.isArray(o)) {
			for (k = 0; k < o.length; k++) {
				pairs.push($.toJSON(o[k]) || "null")
			}
			return "[" + pairs.join(",") + "]"
		}
		var hasOwn = Object.prototype.hasOwnProperty;
		if (typeof o === "object") {
			for (k in o) {
				if (hasOwn.call(o, k)) {
					type = typeof k;
					if (type === "number") {
						name = '"' + k + '"'
					} else {
						if (type === "string") {
							name = '"' + $.string.quoteString(k) + '"'
						} else {
							continue
						}
					}
					type = typeof o[k];
					if (type !== "function" && type !== "undefined") {
						val = $.toJSON(o[k]);
						pairs.push(name + ":" + val)
					}
				}
			}
			return "{" + pairs.join(",") + "}"
		}
	};

	function ColorUtil() {}
	$.extend(ColorUtil.prototype, {
		color2rgb: function(color) {
			var r = parseInt(color.substr(1, 2), 16);
			var g = parseInt(color.substr(3, 2), 16);
			var b = parseInt(color.substr(5, 2), 16);
			return new Array(r, g, b)
		},
		rgb2color: function(rgb) {
			var color = "#";
			for (var i = 0; i < 3; i++) {
				var c = Math.round(rgb[i]).toString(16);
				if (c.length == 1) {
					c = "0" + c
				}
				color += c
			}
			return color.toUpperCase()
		},
		gradient: function() {
			var color = null;
			var start = this.color2rgb(arguments[0]);
			var end = this.color2rgb(arguments[1]);
			if (arguments.length == 4) {
				var grad = new Array(3);
				for (var i = 0; i < 3; i++) {
					grad[i] = start[i] + (end[i] - start[i]) * parseInt(arguments[3]) / parseInt(arguments[2])
				}
				color = this.rgb2color(grad)
			} else {
				color = new Array(parseInt(arguments[2]));
				for (var i = 0; i < parseInt(arguments[2]); i++) {
					var grad = new Array(3);
					for (var j = 0; j < 3; j++) {
						grad[j] = start[j] + (end[j] - start[j]) * i / parseInt(arguments[2])
					}
					color[i] = this.rgb2color(grad)
				}
			}
			return color
		},
		drak: function(color, ratio) {
			var rgbc = this.color2rgb(color);
			for (var i = 0; i < 3; i++) {
				rgbc[i] = Math.floor(rgbc[i] * (1 - ratio))
			}
			return this.rgb2color(rgbc)
		},
		light: function(color, ratio) {
			var rgbc = this.color2rgb(color);
			for (var i = 0; i < 3; i++) {
				rgbc[i] = Math.floor((255 - rgbc[i]) * ratio + rgbc[i])
			}
			return this.rgb2color(rgbc)
		},
		safe: function(color) {
			var rgbc = this.color2rgb(color);
			for (var i = 0; i < 3; i++) {
				var q1 = Math.floor(rgbc[i] / 51) * 51;
				var q2 = Math.ceil(rgbc[i] / 51) * 51;
				if (Math.abs(q1 - rgbc[i]) <= Math.abs(q2 - rgbc[i])) {
					rgbc[i] = q1
				} else {
					rgbc[i] = q2
				}
			}
			return this.rgb2color(rgbc)
		}
	});
	$.color = new ColorUtil();

	function ArrayUtil() {}
	$.extend(ArrayUtil.prototype, {
		unique: function(arr) {
			if (!arr || arr.length === 0) {
				return arr
			}
			var _uniArr = {};
			for (var i = 0, len = arr.length; i < len; i++) {
				var value = arr[i];
				if (typeof(_uniArr[value]) == "undefined") {
					_uniArr[value] = 1
				}
			}
			arr.length = 0;
			for (var i in _uniArr) {
				arr[arr.length] = i
			}
			return arr
		}
	});
	$.array = new ArrayUtil();
	$.detectChromeExtension = function(extensionId, accesibleResource, callback) {
		if (!$.browser.chrome) {
			callback.call(this, false)
		}
		var testUrl = "chrome-extension://" + extensionId + "/" + accesibleResource;
		$.ajax({
			url: testUrl,
			timeout: 1000,
			type: "HEAD",
			success: function() {
				callback.call(this, true)
			},
			error: function() {
				callback.call(this, false)
			}
		})
	};
	jQuery.hydraExtend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			i = 2
		}
		if (typeof target !== "object" && !$.isFunction(target)) {
			target = {}
		}
		if (length === i) {
			target = this;
			--i
		}
		for (; i < length; i++) {
			if ((options = arguments[i]) != null) {
				for (name in options) {
					src = target[name];
					copy = options[name];
					if (target === copy) {
						continue
					}
					if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && $.isArray(src) ? src : []
						} else {
							clone = src && $.isPlainObject(src) ? src : {}
						}
						target[name] = jQuery.hydraExtend(deep, clone, copy)
					} else {
						if (copy !== undefined) {
							if (typeof copy === "boolean" && name !== "separator") {
								if (copy) {
									target[name] = copy;
									if (target.image && target.image.search(/icon_dis/gi) === -1) {
										target.image = target.image.replace(/icon/, "icon_dis")
									}
								}
							} else {
								target[name] = copy
							}
						}
					}
				}
			}
		}
		return target
	};
	$.extend({
		hydraValidateExp: function(exp) {
			if (!exp || $.trim(exp) === "") {
				return true
			}
			var _expBool = $.trim(exp).toLowerCase();
			if (_expBool == "true" || _expBool == "false") {
				return _expBool == "true" ? true : false
			}
			var logicSymbolNum = (exp.split("$$").length - 1) + (exp.split("||").length - 1) + 1,
				_function = "";
			for (var i = 0; i < logicSymbolNum; i++) {
				var andIndex = exp.indexOf("$$"),
					orIndex = exp.indexOf("||"),
					isAnd = andIndex !== -1 && andIndex < orIndex ? true : (andIndex !== -1 && orIndex === -1 ? true : false),
					expItem = exp.substr(
					0, andIndex !== -1 || orIndex != -1 ? (isAnd ? andIndex : orIndex) : exp.length),
					splittedExpItemByOperator = hydraSplitExp(expItem);
				_function += hydraTransformExp(splittedExpItemByOperator[0]) + splittedExpItemByOperator[1] + (i !== logicSymbolNum - 1 ? (isAnd ? " && " : " || ") : "");
				exp = exp.substring((isAnd ? andIndex : orIndex) + 2)
			}
			_function = "function(){if(" + _function + "){return true;}else{return false;}}";
			return new Function("return " + _function)().call()
		}
	});

	function hydraSplitExp(expItem) {
		var splitArr = /([a-zA-Z0-9_\.\(\)]+?|==)(==[']\w+['])/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|==)(==\w+)/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|==)(!=[']\w+['])/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|!=)(!=\w+)/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|>=)(>=\w+)/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|<=)(<=\w+)/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|>)(>\w+)/.exec(expItem) || /([a-zA-Z0-9_\.\(\)]+?|<)(<\w+)/.exec(expItem);
		return [splitArr[1], splitArr[2]]
	}

	function hydraTransformExp(variable) {
		var fields = variable.split("."),
			primary = fields[0].toLowerCase(),
			_exp = {
				"topology": "$.topology",
				"global": "$.topology.config.global",
				"view": "$.topology.view",
				"this": "$.topology.contextObj",
				"parent": "$.topology.contextObj.parent",
				"lab": "$.lab.menu"
			}[primary] || "null";
		if (_exp === "null") {
			$.error("context menu adapter can't transform the primary field " + primary + " in expression!");
			return "null"
		}
		fields.shift();
		for (var i = 0, len = fields.length; i < len; i++) {
			if (fields[i].search(/\(\)/) !== -1) {
				_exp += "." + fields[i]
			} else {
				_exp += "['" + fields[i] + "']"
			}
		}
		return _exp
	}

	function Converter() {}
	$.extend(
	Converter.prototype, {
		requestError: function(XMLHttpRequest, textStatus) {
			if ($.type(XMLHttpRequest) === "string") {
				return XMLHttpRequest
			} else {
				if (textStatus == "timeout") {
					return "请求超时，可能数据量较大或网络繁忙，建议再等待一段时间后查看结果！"
				} else {
					return "错误：" + this.requestStatus(XMLHttpRequest.status) + "！" + this.readyState(XMLHttpRequest.readyState) + " ..."
				}
			}
		},
		readyState: function(rs) {
			return {
				0: "请求未发出",
				1: "请求发出中",
				2: "接收响应内容",
				3: "解析响应内容",
				4: "响应内容已解析"
			}[rs] || "未知"
		},
		requestStatus: function(s) {
			return {
				"401": "访问被拒绝",
				"403": "禁止访问",
				"404": "请求不可达",
				"405": "方法不被允许",
				"406": "不接受的MIME类型",
				"407": "代理身份验证失败",
				"412": "前提条件失败",
				"413": "请求实体过大",
				"414": "请求URI过长",
				"415": "不支持的媒体类型",
				"416": "请求范围无法满足",
				"417": "执行失败",
				"423": "锁定错误",
				"500": "内部服务器错误",
				"501": "页眉值非法",
				"502": "无效响应",
				"503": "服务不可用",
				"504": "网关超时",
				"505": "HTTP版本不支持"
			}[s] || s
		},
		bitps: function(value) {
			value = $.trim(value);
			if (value === "") {
				return ""
			}
			value = parseFloat(value);
			var divided_2_1000 = value / 1000 / 1000;
			var result = null,
				unit = null;
			if (divided_2_1000 < 0.0001) {
				result = this.dight(value, 2);
				unit = "bit/秒"
			} else {
				if (divided_2_1000 < 0.1 && divided_2_1000 >= 0.0001) {
					result = this.dight(value / 1000, 2);
					unit = "Kb/秒"
				} else {
					if (divided_2_1000 < 100 && divided_2_1000 >= 0.1) {
						result = this.dight(
						value / 1000 / 1000, 2);
						unit = "Mb/秒"
					} else {
						if (divided_2_1000 < 100000 && divided_2_1000 >= 100) {
							result = this.dight(
							value / 1000 / 1000 / 1000, 2);
							unit = "Gb/秒"
						} else {
							if (divided_2_1000 < 100000000 && divided_2_1000 >= 100000) {
								result = this.dight(value / 1000 / 1000 / 1000 / 1000, 2);
								unit = "Tb/秒"
							} else {
								if (divided_2_1000 < 100000000000 && divided_2_1000 >= 100000000) {
									result = this.dight(value / 1000 / 1000 / 1000 / 1000 / 1000, 2);
									unit = "Pb/秒"
								} else {
									if (divided_2_1000 < 100000000000000 && divided_2_1000 >= 100000000000) {
										result = this.dight(
										value / 1000 / 1000 / 1000 / 1000 / 1000 / 1000, 2);
										unit = "Eb/秒"
									} else {
										if (divided_2_1000 >= 100000000000000) {
											result = this.dight(
											value / 1000 / 1000 / 1000 / 1000 / 1000 / 1000 / 1000, 2);
											unit = "Zb/秒"
										} else {
											return ""
										}
									}
								}
							}
						}
					}
				}
			}
			return {
				value: result,
				unit: unit
			}
		},
		bytes: function(value) {
			value = $.trim(value);
			if (value === "") {
				return ""
			}
			value = parseFloat(value);
			var divided_2_1024 = value / 1024 / 1024;
			var result = null,
				unit = null;
			if (divided_2_1024 < 0.0001) {
				result = this.dight(value, 2);
				unit = "Byte"
			} else {
				if (divided_2_1024 < 0.1 && divided_2_1024 >= 0.0001) {
					result = this.dight(value / 1024, 2);
					unit = "KB"
				} else {
					if (divided_2_1024 < 100 && divided_2_1024 >= 0.1) {
						result = this.dight(
						value / 1024 / 1024, 2);
						unit = "MB"
					} else {
						if (divided_2_1024 < 100000 && divided_2_1024 >= 100) {
							result = this.dight(
							value / 1024 / 1024 / 1024, 2);
							unit = "GB"
						} else {
							if (divided_2_1024 < 100000000 && divided_2_1024 >= 100000) {
								result = this.dight(value / 1024 / 1024 / 1024 / 1024, 2);
								unit = "TB"
							} else {
								if (divided_2_1024 < 100000000000 && divided_2_1024 >= 100000000) {
									result = this.dight(value / 1024 / 1024 / 1024 / 1024 / 1024, 2);
									unit = "PB"
								} else {
									if (divided_2_1024 < 100000000000000 && divided_2_1024 >= 100000000000) {
										result = this.dight(
										value / 1024 / 1024 / 1024 / 1024 / 1024 / 1024, 2);
										unit = "EB"
									} else {
										if (divided_2_1024 >= 100000000000000) {
											result = this.dight(
											value / 1024 / 1024 / 1024 / 1024 / 1024 / 1024 / 1024, 2);
											unit = "ZB"
										} else {
											return ""
										}
									}
								}
							}
						}
					}
				}
			}
			return {
				value: result,
				unit: unit
			}
		},
		kbytes: function(value) {
			value = $.trim(value);
			if (value === "") {
				return ""
			}
			value = parseFloat(value);
			var divided_2_1024 = value / 1024 / 1024;
			var result = null,
				unit = null;
			if (divided_2_1024 < 0.0001) {
				result = this.dight(value, 2);
				unit = "KB"
			} else {
				if (divided_2_1024 < 0.1 && divided_2_1024 >= 0.0001) {
					result = this.dight(value / 1024, 2);
					unit = "MB"
				} else {
					if (divided_2_1024 < 100 && divided_2_1024 >= 0.1) {
						result = this.dight(
						value / 1024 / 1024, 2);
						unit = "GB"
					} else {
						if (divided_2_1024 < 100000 && divided_2_1024 >= 100) {
							result = this.dight(
							value / 1024 / 1024 / 1024, 2);
							unit = "TB"
						} else {
							if (divided_2_1024 < 100000000 && divided_2_1024 >= 100000) {
								result = this.dight(value / 1024 / 1024 / 1024 / 1024, 2);
								unit = "PB"
							} else {
								if (divided_2_1024 < 100000000000 && divided_2_1024 >= 100000000) {
									result = this.dight(value / 1024 / 1024 / 1024 / 1024 / 1024, 2);
									unit = "EB"
								} else {
									if (divided_2_1024 >= 100000000000) {
										result = this.dight(
										value / 1024 / 1024 / 1024 / 1024 / 1024 / 1024, 2);
										unit = "ZB"
									} else {
										return ""
									}
								}
							}
						}
					}
				}
			}
			return {
				value: result,
				unit: unit
			}
		},
		byteps: function(value) {
			var result = this.bytes(value);
			if (result) {
				result = {
					value: result.value,
					unit: result.unit + "/秒"
				}
			}
			return result
		},

		pkgs: function(value) {
			var result = {
				value: value,
				unit: "包/秒"
			}
			return result
		},
		
		kbyteps: function(value) {
			var result = this.kbytes(value);
			if (result) {
				result = {
					value: result.value,
					unit: result.unit + "/秒"
				}
			}
			return result
		},
		dight: function(value, how) {
			value = Math.round(value * Math.pow(10, how)) / Math.pow(10, how);
			return value
		},
		text: function(value) {
			return value + ""
		},
		integer: function(value) {
			return parseInt(this.number(value), 10)
		},
		number: function(value) {
			var group = /(-?\d*\.?\d+)/.exec(value);
			return group ? Number(group[1]) : 0
		},
		alarm: function(level) {
			return [{
				color: "#333333",
				text: "资源未监控"
			}, {
				color: "#00FFFF",
				text: "正常"
			}, {
				color: "#00ffff",
				text: "通知"
			}, {
				color: "#333333",
				text: "未知"
			}, {
				color: "#f29730",
				text: "警告"
			}, {
				color: "#f36266",
				text: "不可用"
			}][level]
		},
		alarm_disp: function(data, parent, reload) {
			var info = this.alarm(data.value);
			parent.empty();
			if (info) {
				$("<span/>").css("color", info.color).text(
				info.text).appendTo(parent)
			}
		},
		ip_disp: function(data, parent, reload) {
			parent.html(data.value)
		},
		percent2Bar: function(data, parent, reload, options) {
			var plugin = parent.data("plugin");
			if (reload && plugin && plugin.component) {} else {
				parent.empty();
				options = $.extend({
					textSuffix: data.unit
				}, options);
				$div = $("<div/>").appendTo(parent).percentbar(
				options);
				plugin = {
					component: $div
				};
				parent.data("plugin", plugin)
			}
			plugin.value = data.value;
			var timerName = "converter-delay-timer",
				timer = parent.data(timerName);
			if (timer) {
				clearTimeout(timer);
				parent.removeData(timerName)
			}
			parent.data(timerName, setTimeout(function() {
				parent.removeData(timerName);
				var plugin = parent.data("plugin");
				plugin.component.percentbar("change", plugin.value)
			}, 1500))
		},
		reversePercent2Bar: function(value, parent, reload) {
			this.percent2Bar(value, parent, reload, {
				type: "reverse"
			})
		},
		runtime: function(data, parent, reload) {
			var time = $.date.runtime(data.value),
				_this = this;
			if (time) {
				var display = function(time) {
						var nodata = true,
							counters = parent.data("jscounters"),
							execute = function(
							key) {
								var num = time[key],
									counter = counters[key].counter,
									$container = counters[key].container;
								if (num > 0 || (nodata && key === "ss")) {
									nodata = false;
									$container.show();
									setTimeout(

									function() {
										try {
											$container.children(".counter").width(
											8 * (num + "").length);
											counter.setNumber(num)
										} catch (e) {}
									}, 1500)
								} else {
									$container.hide()
								}
							};
						if (counters) {
							execute("dd");
							execute("hh");
							execute("mi");
							execute("ss")
						}
					};
				if (reload) {
					display(time)
				} else {
					parent.empty();
					var create = function(num, unit, start, key) {
							var id = _this._unique(key + "-"),
								counters = parent.data("jscounters");
							if (!counters) {
								counters = {};
								parent.data("jscounters", counters)
							}
							var $tr = parent.find("tr");
							if (!$tr || $tr.length === 0) {
								$tr = $("<tr/>").appendTo(
								$("<table/>").appendTo(
								parent))
							}
							var $container = $("<td/>").addClass("counterContainer").append(
							$("<div/>").addClass("counter").attr("id", id)).append(unit).appendTo($tr);
							var counter = new JSCounter.NumberCounter(
							id, {
								start: start,
								pretoken: false,
								comma: false,
								numberHeight: "12px",
								numberWidth: "8px",
								numberSize: "12px",
								delay: 100
							});
							counter.render();
							counters[key] = {
								counter: counter,
								container: $container
							}
						};
					create.call(this, time.dd, "天", 0, "dd");
					create.call(this, time.hh, "小时", 0, "hh");
					create.call(this, time.mi, "分", 0, "mi");
					create.call(this, time.ss, "秒", 0, "ss");
					display(time)
				}
			}
		},
		text_disp: function(data, parent, reload) {
			parent.empty().html(
			this.text(data.value) + this.unit(data.unit))
		},
		integer_disp: function(data, parent, reload) {
			var plugin = parent.data("plugin");
			if (reload && plugin) {} else {
				parent.empty();
				var id = this._unique("number-"),
					$container = $("<div/>").addClass("counterContainer").append(
					$("<div/>").addClass("counter").attr("id", id)).append(this.unit(data.unit)).appendTo(
					parent),
					counter = new JSCounter.NumberCounter(
					id, {
						start: 0,
						pretoken: false,
						comma: false,
						numberHeight: "12px",
						numberWidth: "8px",
						numberSize: "12px",
						delay: 100
					});
				counter.render();
				plugin = {
					container: $container,
					counter: counter
				};
				parent.data("plugin", plugin)
			}
			plugin.value = this.integer(data.value);
			var timerName = "converter-delay-timer",
				timer = parent.data(timerName);
			if (timer) {
				clearTimeout(timer);
				parent.removeData(timerName)
			}
			parent.data(timerName, setTimeout(function() {
				parent.removeData(timerName);
				var plugin = parent.data("plugin");
				try {
					plugin.counter.setNumber(plugin.value)
				} catch (e) {}
			}, 1500))
		},
		bitps_disp: function(data, parent, reload) {
			var rs = this.bitps(data.value);
			if (rs) {
				if(rs.value==undefined||rs.value===""||rs.value==="-"){
					parent.html("-")//数值转换异常
				}else
					parent.empty().append(rs.value + " " + rs.unit)
			} else {
				parent.html("-")//数值转换异常
			}
		},
		byteps_disp: function(data, parent, reload) {
			var rs = this.byteps(data.value);
			if (rs) {
				if(rs.value==undefined||rs.value===""||rs.value==="-"){
					parent.html("-")//数值转换异常
				}else
					parent.empty().append(rs.value + " " + rs.unit)
			} else {
				parent.html("-")//数值转换异常
			}
		},
		pkgs_disp: function(data, parent, reload) {
			var rs = this.pkgs(data.value);
			if (rs) {
				if(rs.value==undefined||rs.value===""||rs.value==="-"){
					parent.html("-")//数值转换异常
				}else
					parent.empty().append(rs.value + " " + rs.unit)
			} else {
				parent.html("-")//数值转换异常
			}
		},
		kbyteps_disp: function(data, parent, reload) {
			var rs = this.kbyteps(data.value);
			if (rs) {
				if(rs.value==undefined||rs.value===""||rs.value==="-"){
					parent.html("-")//数值转换异常
				}else
					parent.empty().append(rs.value + " " + rs.unit)
			} else {
				parent.html("-")//数值转换异常
			}
		},
		bytes_disp: function(data, parent, reload) {
			var rs = this.bytes(data.value);
			if (rs) {
				if(rs.value==undefined||rs.value===""||rs.value==="-"){
					parent.html("-")//数值转换异常
				}else
					parent.empty().append(rs.value + " " + rs.unit)
			} else {
				parent.html("-")//数值转换异常
			}
		},
		kbytes_disp: function(data, parent, reload) {
			var rs = this.kbytes(data.value);
			if (rs) {
				if(rs.value==undefined||rs.value===""||rs.value==="-"){
					parent.html("-")//数值转换异常
				}else
					parent.empty().append(rs.value + " " + rs.unit)
			} else {
				parent.html("-")//数值转换异常
			}
		},
		_widget: function(value, parent, reload, name, percent, options) {
			if (reload && parent.data("plugin") && parent.data("plugin").component && parent.data("plugin").component.feedData) {
				parent.data("plugin").component.feedData("&value=" + value, 1000)
			} else {
				parent.empty();
				var $div = $("<div/>").appendTo(parent);
				parent.data("plugin", {
					component: $div,
					name: name,
					percent: percent,
					options: options,
					value: value
				});
				var timerName = "converter-delay-timer",
					timer = parent.data(timerName);
				if (timer) {
					clearTimeout(timer);
					parent.removeData(timerName)
				}
				parent.data(
				timerName, setTimeout(

				function() {
					parent.removeData(timerName);
					var plugin = parent.data("plugin"),
						$div = plugin.component;
					if ($div.width() > 0) {
						try {
							$div.component(
							plugin.name, plugin.options, plugin.percent ? {
								percent: plugin.percent
							} : undefined).feedData("&value=" + plugin.value, 1000)
						} catch (e) {}
					} else {
						parent.data(
						timerName, setTimeout(
						arguments.callee, 100))
					}
				}, 100))
			}
		},
		percent2Gauge: function(data, parent, reload) {
			this._widget(data.value, parent, reload, "widget_angular_gauge", 0.58, {
				chart: {
					origw: "310",
					origh: "150",
					gaugestartangle: "180",
					gaugeendangle: "0",
					gaugeoriginx: "150",
					gaugeoriginy: "140",
					numbersuffix: data.unit
				},
				dials: {
					dial: [{
						valuey: "158"
					}]
				},
				colorrange: {
					color: [{
						minvalue: "0",
						maxvalue: "50",
						code: "96C119"
					}, {
						minvalue: "50",
						maxvalue: "80",
						code: "F7C327"
					}, {
						minvalue: "80",
						maxvalue: "100",
						code: "FF7460"
					}]
				}
			})
		},
		reversePercent2Gauge: function(data, parent, reload) {
			this._widget(data.value, parent, reload, "widget_angular_gauge", 0.58, {
				chart: {
					origw: "310",
					origh: "150",
					gaugestartangle: "180",
					gaugeendangle: "0",
					gaugeoriginx: "150",
					gaugeoriginy: "140",
					numbersuffix: data.unit
				},
				dials: {
					dial: [{
						valuey: "158"
					}]
				},
				colorrange: {
					color: [{
						minvalue: "0",
						maxvalue: "20",
						code: "FF7460"
					}, {
						minvalue: "20",
						maxvalue: "50",
						code: "F7C327"
					}, {
						minvalue: "50",
						maxvalue: "100",
						code: "96C119"
					}]
				}
			})
		},
		temperature: function(data, parent, reload) {
			this._widget(data.value, parent, reload, "widget_thermometer", null, {
				chart: {
					numbersuffix: data.unit
				}
			})
		},
		percent2LCD: function(data, parent, reload, reverse) {
			var v = $.trim(data.value);
			if (v === "") {
				parent.html("-")
				return "";
			}
			if (v.indexOf("-")==0) {
				parent.html("-")
				return "-";
			}
			if (v == "未监控") {
				parent.html("未监控")
				return "未监控";
			}
			var status;
			if(v.indexOf("-")>0){
				status = v.split("-")[1];
			}
			v = v.split("-")[0];
			var plugin = parent.data("plugin");
			if (reload && plugin) {} else {
				parent.empty();
				var id = this._unique("percent-"),
					$container = $("<div/>").addClass("counterContainer lcdFont").append(
					$("<div/>").addClass("counter").attr("id", id)).append(
					this.unit(data.unit)).appendTo(parent),
					counter = new JSCounter.NumberCounter(
					id, {
						start: 0,
						pretoken: false,
						comma: false,
						numberHeight: "12px",
						numberWidth: "8px",
						numberSize: "12px",
						delay: 100
					});
				counter.render();
				plugin = {
					container: $container,
					counter: counter
				};
				parent.data("plugin", plugin)
			}
			plugin.value = this.number(data.value);
			var timerName = "converter-delay-timer",
				timer = parent.data(timerName);
			if (timer) {
				clearTimeout(timer);
				parent.removeData(timerName)
			}
			parent.data(timerName, setTimeout(function() {
				parent.removeData(timerName);
				var color = null,
					plugin = parent.data("plugin"),
					value = plugin.value;
				if(status){
					if(status.indexOf("Normal")>0){
						color = "#00FFFF"
					}else if(status.indexOf("Minor")>0){
						color = "#f29730"
					}else if(status.indexOf("Serious")>0){
						color = "#f36266"
					}else if(status.indexOf("CannotFetch")>0){
						color = "#666666"
					}
				}
				plugin.container.css("color", color);
				try {
					plugin.counter.setNumber(value);
					plugin.container.find(".counter").css("width", (value + "").length * 8 + "px")
				} catch (e) {}
			}, 1500))
		},
		reversePercent2LCD: function(value, parent, reload) {
			this.percent2LCD(value, parent, reload, true)
		},
		bool2Text: function(data, parent, reload) {
			parent.html(data.value === true ? "<font color='green'>是</font>" : "<font color='red'>否</font>")
		},
		bool2Symbol: function(data, parent, reload) {
			parent.html(data.value === true ? "<font color='green'>√</font>" : "<font color='red'>×</font>")
		},
		connect: function(data, parent, reload) {
			parent.html({
				"0": "<font color='red'><B>断</B></font>",
				"1": "<font color='green'><B>通</B></font>",
				"3": "<font color='#aaaaaa'><B>测试</B></font>"
			}[data.value] || "")
		},
		support: function(data, parent, reload) {
			parent.html({
				"0": "<font color='red'>不支持</font>",
				"1": "<font color='green'>支持</font>"
			}[data.value] || "")
		},
		avAlgorithm: function(data) {
			return {
				"1": {
					"value": "support",
					"text": "共同支撑",
					"icon": "images/avalgorithm/support.png"
				},
				"2": {
					"value": "collaboration",
					"text": "协作完成",
					"icon": "images/avalgorithm/collaboration.png"
				},
				"3": {
					"value": "composition",
					"text": "独立组成",
					"icon": "images/avalgorithm/composition.png"
				},
				"4": {
					"value": "backup",
					"text": "多机热备",
					"icon": "images/avalgorithm/backup.png"
				},
				"5": {
					"value": "balancing",
					"text": "负载均衡",
					"icon": "images/avalgorithm/balancing.png"
				}
			}[data] || {
				"value": "unaffect",
				"text": "没有依赖",
				"icon": "images/avalgorithm/unaffect.png"
			}
		},
		avAlgorithmImg: function(data, type) {
			if (type === "unaffect") {
				return "unaffect.png"
			}
			var img;
			try {
				data = parseInt(data);
				if (data < 10) {
					img = type + "_0.png"
				} else {
					if (data >= 10 && data < 20) {
						img = type + "_1.png"
					} else {
						if (data >= 20 && data < 30) {
							img = type + "_2.png"
						} else {
							if (data >= 30 && data < 40) {
								img = type + "_3.png"
							} else {
								if (data >= 40 && data < 50) {
									img = type + "_4.png"
								} else {
									if (data >= 50 && data < 60) {
										img = type + "_5.png"
									} else {
										if (data >= 60 && data < 70) {
											img = type + "_6.png"
										} else {
											if (data >= 70 && data < 80) {
												img = type + "_7.png"
											} else {
												if (data >= 80 && data < 90) {
													img = type + "_8.png"
												} else {
													if (data >= 90) {
														img = type + "_9.png"
													} else {
														img = type + ".png"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			} catch (e) {
				img = type + ".png"
			}
			return img
		},
		LCD: function(data, parent, reload) {
			parent.empty().append(
			$("<span/>").addClass("lcdFont").html(
			data.value)).append(
			this.unit(data.unit))
		},
		alarmAckStatus: function(data) {
			return {
				"0": {
					"text": "告警已全部确认",
					"icon": "images/icon/alert_history-16.png"
				},
				"1": {
					"text": "含有未确认告警",
					"icon": "images/icon/alert-16.png"
				}
			}[data] || null
		},
		unit: function(unit) {
			return unit ? "&nbsp;" + unit : ""
		},
		_unique: function(prefix) {
			var l = new Date().getTime(),
				_callee = arguments.callee,
				_cache = _callee.tmpIdCache;
			if (!_cache) {
				_callee.tmpIdCache = _cache = {}
			}
			while (_cache[prefix + l]) {
				l++
			}
			_cache[prefix + l] = true;
			return prefix + l
		}
	});
	$.converter = new Converter()
})(jQuery);