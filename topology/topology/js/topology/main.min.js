var projectPath = $.project.path;
var queryParams ;

function init() {
	queryParams= topoData.queryParams;
	initUI();
	initModel();
}

// 初始化UI

function initUI() {
	shieldContextMenu();
// 加载页面结构
	$.lab.ui.layoutControl(queryParams);
// 加载功能菜单
	$.topology.ui.navMenu = initNavmenu();
// 加载转换器配置
	initConverterConfig();
	$.topology.ui.eagleEye = new EagleEye()
}

// 初始化模型

function initModel() {
	var $topo = $.topology;
	queryParams.type = !queryParams.type ? 1 : queryParams.type;
// 初始化配置参数
	$topo.status = "EDIT";
	$topo.loadPluginConfig(queryParams.type);
	$topo.config.global["screen_adapter"] = (queryParams.fill && queryParams.fill == 1) ? "fill" : "auto";

	if (window.self != window.top) {
		$.topology.config.global["popup_window"] = "1"
	}

	$topo.loadViews({
		success: function() {
			if (!$.svg._support) {
	 			if ($.browser.msie) {
					layer.msg("您目前使用的ie浏览器无法正常浏览图形！" + '请您<a href="tools/SVGView.exe">下载</a>并安装插件。',{icon:0});
				} else {
					layer.msg("您目前使用的浏览器并不是标准内核，不支持图形显示！" + "建议您使用ie、chrome或firefox等主流浏览器。",{icon:0});
				}
			} else {
				var _views = getViewsByTypeAndHidden(queryParams.type, false);
				if (_views.length > 0) {
// 初始化图形引擎
					$topo.loadGraphConfig();
					$topo.graphEngine = new hy.topology.engine.SVGEngine();
					$topo.layout = hy.topology.layout;
					$topo.graphEngine.init("svgContainer", function() {
						getUserDefaultView(queryParams.id);
						initHotKeys()
					})
				}
			}
		}
	});

	$($topo).on("selectElement", function() {
		$.topology.ui.tooltip4hang.selectElementEvents()
	})
}
// 重新加载
function reset(viewId) {
	var $topo = $.topology;
	window.location.href=ctx+"/network/topology.do?userid="+userid+"&displayrule="+displayrule+"&partConfig=" + encodeURI(encodeURI(JSON.stringify(partConfig))) + "&topoId="+$topo.view.id;
}
$.lab.topo.viewRefresh = reset;
// 保存后刷新
function refreshAfterSave(){
	var $topo = $.topology;
	$.ajax({
		type : "get",
		timeout : 60000, //超时时间设置，单位毫秒
		url : ctx + "/network/loadTopology.do?topoId="+$topo.view.id+"&tmp="+new Date().getTime(),
		dataType : "json",
		success : function(msg) {
			console.log(msg)
			$.topology.selector.reset()
			//遍历拓扑图上所有图形，删除tmp图形 start
			var $shapes = $.topology.shapes
			$.each($shapes, function(type, objs) {
				$.each(objs, function(id, obj) {
					if(id.indexOf("tmp-")==0){
						objtemp = $.topology.find(id);
						if (objtemp) {
							objtemp.remove()
						}
					}
				})
			})
			//遍历拓扑图上所有图形，删除tmp图形 end
			topoData.view = eval("[{" + $topo.view.id + ":" + msg.topo.viewContent + "}]")[0];
			$.topology.loadTopo( $topo.view.id, {
				success: function() {
					loadEvents();
					loadKpis();
		    		closeLodingWindow();
				}
			})
		}
	});
}
$.lab.topo.stateRefresh = refreshAfterSave;

// 默认资源
function getUserDefaultView(def) {
// 为您加载默认资源
	var _type = queryParams && queryParams.type ? queryParams.type : 1;
	loadTopology(def, true)
}


function refreshStates(){
	var $topo = $.topology;
	$.ajax({
		type : "get",
		timeout : 60000, //超时时间设置，单位毫秒
		url : "./topology/loadTopologyDatas.json",
		dataType : "json",
		success : function(msg) {
			topoData.event = msg.events;
			topoData.kpi = msg.kpis;
			loadEvents();
			loadKpis();
			showAlarmInfo(msg.alarms,msg.outreachIps);//报警信息.//outreachIps违规外联
		}
	});
	setTimeout(function() {refreshStates()}, 60000);// 状态刷新事件
}
// 加载拓扑
function loadTopology(vid, panelFlag) {
// 加载并绘制拓扑图
	var id = arguments.length === 0 ? queryParams.id : vid;
	$.topology.loadTopo( id, {
		success: function() {
			var viewType = $.topology.view.type;
// 加载上下文配置
			$.topology.loadContextConfig($.topology.getAllObjectClass());
// 加载指标配置
			$.topology.loadKpiConfig(viewType);
			if(panelFlag){
				initCommonReaourcePanel();
			}
			// 加载Tooltip配置
			$.topology.ui.tooltip4hang.init();
			$.topology.ui.tooltip.init();
			$.topology.ui.eagleEye.init();
			refreshStates();
    		closeLodingWindow();
		}
	})
}

var move=false;// 移动标记
var $_tempDragIcon ,_tempX, _tempY, imgIconPath, imgIconWidth, imgIconHeight;
// 初始化资源图标选框
function initCommonReaourcePanel() {
	var $accordion = $("#accordion"), defaultactive=0, data = topoData.config.panel, itemPrefix = "resource_partitioning_", treePrefix = itemPrefix + "tree_";
	var itemId, item, $ztree, panelId = 0;
		itemId = itemPrefix + panelId;
		/*屏蔽资源*/
		// item = addAccordionItem(itemId, "资源");

		// $ztree = $("<ul class='ztree'/>").attr("id", treePrefix + panelId).appendTo(item.content);

		// item.title.data("panelId", panelId);
		// item.title.data("ztree", $ztree);
		// item.title.click(function() {
		// 	var $this = $(this), panelId = $this.data("panelId"), callback = function() {
		// 		$.topology.ui.trees.focus = $.topology.ui.trees[panelId]
		// 	};
		// 	if (!$this.data("zTreeInited")) {
		// 		$this.data("zTreeInited", true);
		// 		initRootNode($this.data("ztree"), panelId, callback)
		// 	} else {
		// 		callback();
		// 	}
		// });
		// if(topoData.resourceNodes.length>0){
		// 	item.title.trigger("click");
		// }else{
		// 	defaultactive = 1;
		// }

	var iconCfgData = topoData.config.icon;
	for (var i = 0, len = iconCfgData.length; i < len; i++) {
		itemId = "icon_partitioning_" + i;
		item = addAccordionItem(itemId, iconCfgData[i].label);
		item.title.data("titleId", i);
		item.title.click(function() {
			var $this = $(this), titleId = $this.data("titleId");
			var icons = iconCfgData[titleId].icons;
			initIconPicker("icon_partitioning_" + titleId, icons);
		});

		if(topoData.resourceNodes.length==0&&i==0){
			item.title.trigger("click");
		}
	}

	function addBackGroundPanel(){
		itemId = "background_partitioning";
		item = addAccordionItem(itemId, "背景");
		item.title.data("background", true);
		item.title.click(function() {
			var $this = $(this);
			initBackGroundPicker(itemId);
		});
	}
	addBackGroundPanel();

	$accordion.accordion({
		heightStyle: "fill",
		active: defaultactive
	});

	function addAccordionItem(id, title) {

		var $title = $("<h3>" + title + "</h3>");
		var $content = $("<div/>").attr("id", id).css('overflow','auto');
		$accordion.append($title).append($content);
		return {
			title: $title,
			content: $content
		}
	}

	function initBackGroundPicker(panelId){
		initBgColorPicker(panelId);
	}
	// 自定义图标初选择始化
	function initIconPicker(panelId, icons){
		var icon = null, $table = $("<table></table>").addClass("icon-picker-table"), $tr = null, iconPath = "",  _row = 0;
		for (var j = 0, iconLen = icons.length; j < iconLen; j++) {
			icon = icons[j]; iconPath = ctxImg+"/topology/icon_svg/" ;
			if (j % 4 === 0) {
				$tr = $("<tr></tr>").appendTo($table);
				_row++
			}
			iconPath += icon.path + (icon.name.split(".")[1].toLowerCase() === "svg" ? (icon.name.split(".")[0] + ".gif") : icon.name);
			var $img = $("<div class=\"vitualSymbolIcon\"/>").attr({
				iconPath: icon.path+icon.name,
				iconWidth: 36,
				iconHeight: 36,
				draggable : false
			}).append($("<img/>").attr({
				id: "vs-icon-" + icon.name.split(".")[0],
				src: iconPath,
				title: icon.desc,
				width: 36,
				height: 36,
				draggable : false
			}).addClass("icon-item")).attr("id", "vs-icon-container-" + icon.name.split(".")[0]);

			$("<td></td>").append($img).appendTo($tr)
		}
		$("#"+panelId).find("*").unbind();
		$("#"+panelId).html("").append($table);

		$(".vitualSymbolIcon").mousedown(function(e){
			var $this = $(this);
			move=true;
			var $dragArea = $(".topologyCanvas");
			$dragArea.children(".dragging-node-icon").each(function() { $(this).remove() });
			imgIconPath=$this.attr("iconPath");
			$_tempDragIcon = $("<img width='36px' height='36px'/>").attr("src", ctxImg+"/topology/icon_svg/" + $this.attr("iconPath").split(".")[0] + ".gif").addClass("dragging-node-icon").appendTo($dragArea);
			imgIconWidth = $this.attr("iconWidth");
			imgIconHeight = $this.attr("iconHeight");

			$("#"+panelId).mouseleave(function(){
				$("#"+panelId).unbind("mouseleave");
				$(document).mousemove(function(e){
					if(move){
						var offset = $dragArea.offset();
						$_tempDragIcon.css({
							left: e.pageX - offset.left + 5,
							top: e.pageY - offset.top + 5
						});
						_tempX=e.pageX - offset.left + 5;
						_tempY=e.pageY - offset.top + 5;
						if ($_tempDragIcon.is(":hidden")) {
							$_tempDragIcon.show()
						}
					}
				}).mouseup(function(){
					if(move){
					    $(document).unbind("mousemove");
					    $(document).unbind("mouseup");
					    $dragArea.children(".dragging-node-icon").each(function() {
							$(this).remove()
						});
						x = _tempX + 50;
						y = _tempY + 50;
						dropVitualSymbol(imgIconPath, x, y, imgIconWidth, imgIconHeight)
						$_tempDragIcon ,_tempX, _tempY, imgIconPath, imgIconWidth, imgIconHeight;
						move=false;
						makemovediv("#huitudiv","#topuwintitle");
						makemovediv("#warninglist","#warninglisttitle");
					}
				})
			})
		});
	}
	// 资源树初始化
	function initRootNode($element, panelId, callback) {
		if (!$.topology.ui.trees) {
			$.topology.ui.trees = {}
		}
		function loadRes(treeNode){
			if (treeNode && treeNode.isParent) {
				var urlStr = ctx+"/network/loadResIns.do?groupId="+treeNode.id;
				if(treeNode.nlevel==2){
					$.topology.ui.trees[panelId].removeChildNodes(treeNode);
					loadingwindow(ctx, 300, 50, '加载中...')
					$.ajax({
						type : "get",
						url : urlStr,
						timeout : 60000, //超时时间设置，单位毫秒
						dataType : "json",
						success : function(msg) {
				    		closeLodingWindow();
							var children = msg.children;
							for (var i = 0; i < children.length; i++) {
								var newNode = {
									name: children[i].name,
									id: children[i].id,
									instanceId: children[i].id,
									object_class : children[i].object_class,
									iconSkin : children[i].iconSkin,
									instanceName: children[i].title,
				 		       		nodeLevel: "child"
								}
								$.topology.ui.trees[panelId].addNodes(treeNode, newNode);
							}
							return true;
						},
						error: function (){
				    		closeLodingWindow();
							layer.msg("系统异常，请联系管理员",{icon:0});
						}
					})
				}
			}

		}
		//$.topology.ui.trees[panelId] = $.fn.zTree.init($element, {
		//	data: {
		//		simpleData: { enable: true },
		//		key: { title: "title" }
		//	},
		//	view: {
		//		showIcon: false
		//	},
		//	callback: {
		//		beforeDrag: function(treeId, treeNodes) {
		//			if (treeNodes.length === 1) {
		//				var treeNode = treeNodes[0], srcPos = {};
		//				if (!treeNode.isParent) {
		//					var objectClass = treeNode.object_class, $dragArea = $(".topologyCanvas"), $svgArea = $("#svgCanvas"), icon = getIconByObjectClass(objectClass);
		//					$dragArea.children(".dragging-node-icon").each(function() {
		//						$(this).remove()
		//					});
		//					var $dragIcon = $("<img width='36px' height='36px'/>").attr("src", icon.path).addClass("dragging-node-icon").appendTo($dragArea);
		//					var mvEntName = "mousemove.dragging-treenode", muEntName = "mouseup.drop-treenode";
		//					$dragArea.bind(mvEntName, function(e) {
		//						var offset = $dragArea.offset();
		//						$dragIcon.css({
		//							left: e.pageX - offset.left + 5,
		//							top: e.pageY - offset.top + 5
		//						});
		//						if (!srcPos.init) {
		//							srcPos.init = true;
		//							srcPos.x = $dragIcon.css("left");
		//							srcPos.y = $dragIcon.css("top")
		//						}
		//						if ($dragIcon.is(":hidden")) {
		//							$dragIcon.show()
		//						}
		//					});
		//					$svgArea.bind(muEntName, function(e) {
		//						$svgArea.unbind(muEntName);
		//						$dragArea.unbind(mvEntName);
		//						if ($dragIcon.is(":visible")) {
		//							if (dropTreeNode(treeNode, e.pageX, e.pageY)) {
		//								$dragIcon.hide().remove()
		//							}
		//						}
		//					});
		//					$(document).unbind(muEntName).bind(muEntName, function(e) {
		//						$(document).unbind(muEntName);
		//						$dragArea.unbind(mvEntName);
		//						if ($dragIcon.is(":visible")) {
		//							if (srcPos.init) {
		//								$dragIcon.animate({
		//									left: srcPos.x,
		//									top: srcPos.y
		//								}, 500, function() {
		//									srcPos.init = false;
		//									$dragIcon.hide().remove()
		//								})
		//							} else {
		//								$dragIcon.hide().remove()
		//							}
		//						} else {
		//							$dragIcon.hide().remove()
		//						}
		//					})
		//				}
		//			}
		//			return false
		//		},
		//		onClick: function(event, treeId, treeNode, clickFlag) {
		//			loadRes(treeNode);
		//		},
		//		beforeExpand: function(treeId, treeNode) {
		//			loadRes(treeNode);
		//		}
		//	},
		//	edit: {
		//		drag: {
		//			prev: false,
		//			next: false,
		//			inner: false
		//		},
		//		enable: true,
		//		showRemoveBtn: false,
		//		showRenameBtn: false
		//	}
		//}, topoData.resourceNodes);

		if ($.isFunction(callback)) {
			callback()
		}
	}
	$.lab.topo.initResTree = initRootNode;
}

function loadEvents() {
	var winName = "eventLoadErrorWindow";
	$.topology.loadEvent(null, {
		success: function() {
			$.topology.ui.tooltip.data({
				event: true
			});
			$.topology.ui.tooltip4hang.data({
				event: true
			})
		},
		complete: function() {}
	})
}

function loadKpis() {
	var winName = "kpiLoadErrorWindow";
	$.topology.loadKpi({
		success: function() {
			if ($.topology.view.type == 1) {
				$.lab.itsm.linkWeight()
			}
			$.topology.ui.tooltip.data({
				kpi: true
			});
			$.topology.ui.tooltip4hang.data({
				kpi: true
			});
		}
	})
}

function getViewsByTypeAndHidden(type, hidden) {
	var _views = [], datas = $.topology.views;
	for (var id in datas) {
		if (type == datas[id].type && hidden == datas[id].isHidden) {
			_views.push(datas[id])
		}
	}
	return _views.sort(function(a, b) {
		return a.name.localeCompare(b.name)
	}).sort(function(a, b) {
		return (parseInt(a.orderCode) - parseInt(b.orderCode))
	})
}

function shieldContextMenu() {
	$(document).bind("contextmenu", function(e) {
		return false
	})
}

function screenMaximum() {
	if (window.screen) {
		window.moveTo(0, 0);
		window.resizeTo(screen.availWidth, screen.availHeight)
	}
}


function initNavmenu() {
	return $(".ui-layout-north").css("position", "static").navmenu({
		menu: topoData.config.navmenu4show
	})
}

function _modelGroup(arr) {
	var _callee = arguments.callee,
		groupNames = _callee.groupNames,
		resources = {},
		unknowNameTypes = [],
		modelTypes = [],
		containerGroup = null,
		otherGroup = null,
		nodes = [];
	if (!groupNames) {
		groupNames = _callee.groupNames = {
			"4999": "其他",
			"9999": "容器"
		}
	}
	$.each(arr, function(idx, o) {
		var id = o.id, group = resources[o.objectClass], name = String.prototype.replace.call(o.name || "", /<br>/ig, " ");
		if (o.objectId && o.objectId > 0 && o.objectClass && o.objectClass > 0 && o.objectClass != 4999) {
			if (!group) {
				resources[o.objectClass] = group = {
					id: "oc_" + o.objectClass,
					objectClass: o.objectClass,
					drag: false,
					nocheck: true,
					nodeType: "group",
					children: []
				};
				modelTypes.push(o.objectClass);
				if (!groupNames[o.objectClass]) {
					unknowNameTypes.push(o.objectClass)
				}
			}
		} else {
			if (o.type == 1) {
				if (!containerGroup) {
					containerGroup = resources["9999"] = {
						id: "oc_9999",
						objectClass: 9999,
						drag: false,
						nocheck: true,
						nodeType: "group",
						children: []
					}
				}
				group = containerGroup
			} else {
				if (!otherGroup) {
					otherGroup = resources["4999"] = {
						id: "oc_4999",
						objectClass: 4999,
						drag: false,
						nocheck: true,
						nodeType: "group",
						children: []
					}
				}
				group = otherGroup
			}
		}
		var nodeType = o.objectClass >= 100000 ? "bsmnode" : "node";
		group.children.push({
			id: id,
			name: name,
			title: name,
			drag: false,
			nodeType: nodeType,
			iconSkin: nodeType + " n" + group.objectClass
		})
	});
	if (containerGroup) {
		modelTypes.push(containerGroup.objectClass)
	}
	if (otherGroup) {
		modelTypes.push(otherGroup.objectClass)
	}
	var unknowNameType, ocInfo, i;
	for (i = 0; i < unknowNameTypes.length; i++) {
		unknowNameType = unknowNameTypes[i];
		ocInfo = $.topology.getObjectClassInfo(unknowNameType);
		if (ocInfo && ocInfo.name) {
			groupNames[unknowNameType] = ocInfo.name
		} else {
			layer.msg("检查到未注册的资源类型[" + unknowNameType + "]！",{icon:0});
			continue
		}
	}
	if (modelTypes.length > 0) {
		var i, group;
		for (i = 0; i < modelTypes.length; i++) {
			group = resources[modelTypes[i]];
			group.name = group.title = groupNames[group.objectClass];
			nodes.push(group)
		}
	}
	return nodes
}

function initConverterConfig() {
	$.topology.ui.converterConfig = topoData.config.convertor
}
// 缩略图功能
function EagleEye() {
	var eagleeye = {}, visible = false, boxDraging = false, isOpen = true, isLoadImage = false,
		viewSize = [0, 0], imageSize = [0, 0], imageOffset, boxBorder = [0, 0];
	var svgContainerId = "svgContainer", eagleEyeId = "eagleEye", eagleEyeHeaderId = "eagleEye-header",
		eagleEyeZoomId = "eagleEye-zoom", eagleEyeCloseId = "eagleEye-close", eagleEyeContentId = "eagleEye-content",
		eagleEyeThumbnailWrapId = "eagleEye-thumbnail-wrap", eagleEyeThumbnailId = "eagleEye-thumbnail";
	eagleEyeBoxId = "eagleEye-box";
	var $svgContainer = null, $eagleEye = null, $eagleEyeHeader = null, $eagleEyeZoom = null, $eagleEyeClose = null,
		$eagleEyeContent = null, $eagleEyeThumbnailWrap = null, $eagleEyeThumbnail = null, $eagleEyeBox = null;

	function initViewSize() {
		$eagleEyeContent.css({
			width: $eagleEye.width(),
			height: $eagleEye.height() - $eagleEyeHeader.outerHeight()
		});
		viewSize = [$eagleEyeContent.width(), $eagleEyeContent.height()]
	}

	function initEagleEyePosition() {
		$eagleEye.css({
			 top: -$eagleEye.outerHeight(),
		     left: 0
			// top: -$eagleEye.outerHeight() - 2,
			// left: $svgContainer.width() - $eagleEye.outerWidth() - 15
			// liyang 鹰眼初始化位置
		});
		boxBorder[0] = $eagleEyeBox.outerWidth() - $eagleEyeBox.width();
		boxBorder[1] = $eagleEyeBox.outerHeight() - $eagleEyeBox.height();
		updateImageOffset();
		updateBox()
	}

	function updateEagleEyePosition() {
		$eagleEye.css({
			top: -$eagleEye.outerHeight(),
		    left: 0
			// top: -$eagleEye.outerHeight(),
			// left: $svgContainer.width() - $eagleEye.outerWidth() - 15
			// liyang 鹰眼窗口改变后位置
		});
		updateImageOffset();
		updateBox()
	}

	function updateZoom() {
		var zoom = Math.floor($.topology.view.scale() * 100);
		$eagleEyeZoom.text("缩放至" + zoom + "%")
	}

	function setBoxSize(width, height) {
		$eagleEyeBox.css({
			width: width,
			height: height
		})
	}

	function updateBox() {
		if (boxDraging) {
			return
		}
		var bbox = $.topology.view.getBBox(),
			viewport = $.topology.view.viewport();
		if (!bbox || !viewport) {
			return
		}
		var x = 0, y = 0, width = 0, height = 0;
		x = imageSize[0] * viewport.x / bbox.width;
		y = imageSize[1] * viewport.y / bbox.height;
		if (x < 0) {
			x = 0
		}
		if (y < 0) {
			y = 0
		}
		x += imageOffset.left;
		y += imageOffset.top;
		width = viewport.width / bbox.width * imageSize[0];
		height = viewport.height / bbox.height * imageSize[1];
		width -= boxBorder[0];
		height -= boxBorder[1];
		if (width < 0) {
			width = 0
		}
		if (height < 0) {
			height = 0
		}
		setBoxSize(width, height);
		$eagleEyeBox.offset({
			left: x,
			top: y
		})
	}

	function updateViewport() {
		var boxOffset = $eagleEyeBox.offset(), bbox = $.topology.view.getBBox();
		var x = (boxOffset.left - imageOffset.left) / imageSize[0] * bbox.width,
			y = (boxOffset.top - imageOffset.top) / imageSize[1] * bbox.height,
			width = $eagleEyeBox.outerWidth() / imageSize[0] * bbox.width,
			height = $eagleEyeBox.outerHeight() / imageSize[1] * bbox.height;
		$.topology.view.viewport(x, y, width, height)
	}

	function bindEvents() {
		$eagleEye.draggable({
			handle: "#" + eagleEyeHeaderId,
			containment: "#" + svgContainerId,
			cancel: "#" + eagleEyeCloseId,
			scroll: false,
			drag: function(event, ui) {
				updateImageOffset()
			},
			stop: function() {
				updateImageOffset()
			}
		});
		$eagleEyeBox.draggable({
			containment: "#eagleEye-thumbnail",
			scroll: false,
			start: function() {
				boxDraging = true
			},
			drag: function(event, ui) {
				updateViewport()
			},
			stop: function() {
				boxDraging = false
			}
		});
		$eagleEyeClose.button({
			icons: {
				primary: "ui-icon-close"
			},
			text: false
		});
		$eagleEyeClose.click(function() {
			eagleeye.close()
		})
	}

	function initImage(image) {
		var scale = Math.min(viewSize[0] / image.width, viewSize[1] / image.height);
		imageSize = [image.width * scale, image.height * scale];
		image.width = imageSize[0];
		image.height = imageSize[1];
		$eagleEyeThumbnailWrap.html(image);
		$eagleEyeThumbnail = $("#" + eagleEyeThumbnailId);
		$eagleEyeThumbnailWrap.css({
			left: (viewSize[0] - imageSize[0]) / 2,
			top: (viewSize[1] - imageSize[1]) / 2
		});
		isLoadImage = true
	}

	function updateImageOffset() {
		imageOffset = $eagleEyeThumbnail.offset()
	}
	eagleeye.init = function() {
		isLoadImage = false;
		$svgContainer = $("#" + svgContainerId);
		$eagleEye = $("#" + eagleEyeId);
		$eagleEyeHeader = $("#" + eagleEyeHeaderId);
		$eagleEyeZoom = $("#" + eagleEyeZoomId);
		$eagleEyeClose = $("#" + eagleEyeCloseId);
		$eagleEyeContent = $("#" + eagleEyeContentId);
		$eagleEyeThumbnailWrap = $("#" + eagleEyeThumbnailWrapId);
		$eagleEyeBox = $("#" + eagleEyeBoxId);

		$eagleEye.disableSelection();
		bindEvents();
		$eagleEyeBox.css({ opacity: 0.3 });
		setBoxSize(0, 0);
		$eagleEyeZoom.empty();
		$eagleEyeThumbnailWrap.empty();
		eagleeye.hide();
//debugger
		var svgCode = $.topology.graphEngine.code();
		var urlStr = ctx + "/network/topology/createPNG.do";
		$.ajax({
			type : "post",
			url : urlStr,
			dataType : "json",
			timeout : 60000, //超时时间设置，单位毫秒
			data : encodeURI("&id="+ getViewId()+"&svgCode=" + svgCode),
			success : function(content) {
				eagleeye.loadImage({
					path: ctx+"/topoImgs/" + getViewId() + ".png",
					success: function(image) {
						initViewSize();
						initImage(image);
						if ($.topology.graphEngine.canvas.isMoveEnabled()) {
							eagleeye.show(true);
							updateZoom()
						}
						initEagleEyePosition();
						eagleeye.bindContainerEvents();

						$($.topology.graphEngine.canvas).on("change", function(evt, args) {
							if ($.topology.graphEngine.canvas.isMoveEnabled()) {
								if (isLoadImage) {
									eagleeye.show(true);
									updateBox()
								}
							} else {
								eagleeye.hide(true)
							}
							updateZoom()
						})
					}
				})
			},
			error: function (){
				layer.msg("系统异常，请联系管理员",{icon:0});
			}
		})
	};
	eagleeye.reset = function() {
		isLoadImage = false;
		eagleeye.hide();
		setBoxSize(0, 0);
		$eagleEyeZoom.empty();
		$eagleEyeThumbnailWrap.empty()
	};
	eagleeye.loadImage = function(options) {
		var image = new Image();
		image.id = eagleEyeThumbnailId;
		image.onerror = function() {};
		image.onload = function() {
			options.success(image)
		};
		image.src = options.path + "?timestamp=" + new Date().getTime()
	};
	eagleeye.bindContainerEvents = function() {
		if ($svgContainer.attr("eagleeye-event")) {
			return
		}
		$svgContainer.attr("eagleeye-event", "true");
		$svgContainer.resize(function() {
			updateEagleEyePosition()
		})
	};
	eagleeye.open = function() {
		isOpen = true;
		eagleeye.show(true)
	};
	eagleeye.close = function() {
		isOpen = false;
		eagleeye.hide(true)
	};
	eagleeye.show = function(animate) {
		if (!isOpen || !isLoadImage) {
			return
		}
		if (!visible) {
			visible = true;
			if (animate && !($.browser.msie && Number($.browser.version.split(".")[0]) <= 8)) {
				$eagleEye.stop(true, true);
				$eagleEye.fadeIn("slow")
			} else {
				$eagleEye.show()
			}
			updateImageOffset();
			updateBox()
		}
	};
	eagleeye.hide = function(animate) {
		if (visible) {
			visible = false;
			if (animate && !($.browser.msie && Number($.browser.version.split(".")[0]) <= 8)) {
				$eagleEye.stop(true, true);
				$eagleEye.fadeOut("slow")
			} else {
				$eagleEye.hide()
			}
		}
	};
	eagleeye.isOpen = function() {
		return isOpen
	};
	eagleeye.visible = function() {
		return visible
	};
	return eagleeye
}
// 初始化热键
function initHotKeys() {
	var keys = [{
		key: "Ctrl+X",
		fn: function() {}
	}, {
		key: "Ctrl+C",
		fn: $.lab.topo.copySelectedElement
	}, {
		key: "Ctrl+V",
		fn: $.lab.topo.pasteElementInCenter
	}, {
		key: "del",
		fn: $.lab.topo.realDeleteElement
	}, {
		key: "Ctrl+Z",
		fn: function() {}
	}, {
		key: "Ctrl+Y",
		fn: function() {}
	}, {
		key: "Ctrl+A",
		fn: $.lab.topo.selectAllNodes
	}, {
		key: "Ctrl+R",
		fn: $.lab.topo.viewPositionReset
	}, {
		key: "Ctrl+Shift+A",
		fn: $.lab.topo.selectElemtByCondition
	}, {
		key: "Ctrl+Left",
		fn: function() { }
	}, {
		key: "Ctrl+Right",
		fn: function() { }
	}, {
		key: "Ctrl+Up",
		fn: function() { }
	}, {
		key: "Ctrl+Down",
		fn: function() { }
	}, {
		key: "Left",
		fn: function() { $.lab.topo.moveSelected(-1, 0) }
	}, {
		key: "Up",
		fn: function() { $.lab.topo.moveSelected(0, -1) }
	}, {
		key: "Right",
		fn: function() { $.lab.topo.moveSelected(1, 0) }
	}, {
		key: "Down",
		fn: function() { $.lab.topo.moveSelected(0, 1) }
	}, {
		key: "Shift+Left",
		fn: function() { $.lab.topo.moveSelected(-10, 0) }
	}, {
		key: "Shift+Up",
		fn: function() { $.lab.topo.moveSelected(0, -10) }
	}, {
		key: "Shift+Right",
		fn: function() { $.lab.topo.moveSelected(10, 0) }
	}, {
		key: "Shift+Down",
		fn: function() { $.lab.topo.moveSelected(0, 10) }
	}, {
		key: "Alt+Ctrl+T",
		fn: $.lab.topo.vertTopAlign
	}, {
		key: "Alt+Ctrl+M",
		fn: $.lab.topo.vertMiddleAlign
	}, {
		key: "Alt+Ctrl+B",
		fn: $.lab.topo.vertBottomAlign
	}, {
		key: "Alt+Ctrl+L",
		fn: $.lab.topo.horiLeftAlign
	}, {
		key: "Alt+Ctrl+C",
		fn: $.lab.topo.horiCenterAlign
	}, {
		key: "Alt+Ctrl+R",
		fn: $.lab.topo.horiRightAlign
	}];
	$.each(keys, function(i, opts) {
		var key, fn = opts.fn,
			pd = false;
		if ($.isArray(opts.key)) {
			key = opts.key[0];
			if (opts.key.length > 1) {
				pd = opts.key[1]
			}
		} else {
			key = opts.key
		}
		bindKeyDown(key, fn, pd)
	});

	function bindKeyDown(key, fn, pd) {
		jQuery(document).bind("keydown", key, function(e) {
			if (pd) {
				e.preventDefault()
			}
			fn();
			return false
		})
	}
}
// 警告窗口
function showWarnDialog(info, xhr, status, options) {
	$.jAlert($.extend({
		type: "warn",
		content: xhr ? $.converter.requestError(xhr, status) + " [" + info + "]" : info
	}, options))
}
// 获得当前Id
function getViewId() {
	var vid = null, view = $.topology.view;
	if (view) {
		vid = view.id
	}
	return vid
}
// 根据objectClass获得默认图标
function getIconByObjectClass(objectClass) {
	objectClass = objectClass + "";
	var g, icon = null, path = null, width = null, height = null, icons = arguments.callee.icons;
	if (!icons) {
		icons = {};
		arguments.callee.icons = icons
	}
	icon = icons[objectClass];
	if (!icon && $.topology && $.topology.config) {
		g = $.topology.config.graph[objectClass];
		if (g && (g.type === "ICON")) {
			path = g.icon;
			width = g.width;
			height = g.height;
			if (path) {
				path = ctxImg+"/topology/icon_svg/" + path.replace(/\.svg/i, ".gif");
				icon = {
					path: path,
					width: width || 32,
					height: height || 32
				};
				icons[objectClass] = icon
			}
		}
	}
	if (!icon) {
		icon = {
			path: ctxImg+"/topology/status/help.png",
			width: 32,
			height: 32
		};
		icons[objectClass] = icon
	}
	return icon
}
// 资源节点拖拽释放响应
function dropTreeNode(treeNode, x, y) {

	//判断当前拓扑是否已存在相同自动发现节点
	var tempInstanceId = treeNode.instanceId;
	var $shapes = $.topology.shapes
	var flag = false;
	$.each($shapes, function(type, objs) {
		$.each(objs, function(id, obj) {
			if(obj.objectType=="auto"&&obj.instanceId==tempInstanceId){
				flag=true;
			}
		})
	})
	if(flag){
		layer.msg("当前拓扑已存在相同节点",{icon:0});
	}
	return dragNode2Canvas(treeNode, x, y);

	function dragNode2Canvas(treeNode, x, y) {
		if (arguments.length != 3) {
			return false
		}
		var coords = $.topology.graphEngine.canvas.coordinateConvert.page2Canvas(x, y);
		var cx = coords.x,
			cy = coords.y;
		var vp = $.topology.graphEngine.canvas.viewport();
		if (cx < vp.x || cx > vp.x + vp.width || cy < vp.y || cy > vp.y + vp.height) {
			return false
		}
		var data = $.lab.topo.treeNode2SymbolData(treeNode);
		$.extend(data, {
			"x": cx,
			"y": cy,
			"objectType": "auto",
			"parentId": -1
		});
		var symbol = $.topology.createSymbol(data);
		symbol.add();
		symbol.edgeDetect();
		var containers = $.topology.shapes.containers, nodeBbox;
		for (var k in containers) {
			o = containers[k];
			nodeBbox = o.getBBox();
			if (cx >= nodeBbox.minX && cx <= nodeBbox.maxX && cy >= nodeBbox.minY && cy <= nodeBbox.maxY) {
				o.addChild(symbol, true);
				o.edgeDetect();
				o.change();
				break
			}
		}
		var symbols = [];
		symbols.push(symbol);
		$.topology.selector.select(symbol.id);
		$.topology.saveTopo();//拖拽资源进拓扑后自动保存拓扑
		return true
	}
}
// 自定义图标拖拽释放响应
function dropVitualSymbol(imgIconPath, x, y, imgIconWidth, imgIconHeight) {
	return dragVitualSymbol2Canvas(imgIconPath, x, y, imgIconWidth, imgIconHeight);

	function dragVitualSymbol2Canvas(imgIconPath, x, y, imgIconWidth, imgIconHeight) {
		if (arguments.length != 5) {
			return false
		}
		var coords = $.topology.graphEngine.canvas.coordinateConvert.page2Canvas(x, y);
		var cx = coords.x,
			cy = coords.y;
		var vp = $.topology.graphEngine.canvas.viewport();
		if (cx < vp.x || cx > vp.x + vp.width || cy < vp.y || cy > vp.y + vp.height) {
			return false
		}
		$.lab.topo.addIconAsVitualSymbol(imgIconPath, cx, cy, imgIconWidth, imgIconHeight)
		return true
	}
}