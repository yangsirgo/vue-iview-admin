/**
 * jquery.tooltip
 * @version 0.1
 */
(function($) {
	var defaults = null,
		publicOptions = null,
		keys = null,
		methods = null;
	publicOptions = {
		monitorSizeTime: 15000,
		adjustMethodByMonitor: "move"
	}, defaults = {
		id: "defaultTooltipId",
		title: "",
		content: "",
		skin: "lightblue",
		left: 0,
		top: 0,
		display: false,
		moveAnimateDelay: 200,
		moveAnimateTime: 300,
		showAnimateDelay: 500,
		showAnimateTime: 200,
		hideAnimateDelay: 500,
		hideAnimateTime: 100,
		showOpacity: 1,
		hideOpacity: 0,
		isInitHead: true,
		isInitBody: true,
		isMonitorSize: false,
		isPublicMonitor: true,
		monitorSizeTime: 1000,
		adjustMethodByMonitor: "move",
		parent: "body",
		offsetLeft: 10,
		offsetRight: 10,
		offsetTop: 10,
		offsetBottom: 10,
		posLeft: 0,
		posTop: 0,
		posWidth: null,
		posHeight: null
	}, keys = {
		storeId: "tooltipbodystoreid",
		tooltipContainerClass: "tipcontainer",
		tooltipClass: "tooltip",
		tooltipHeadClass: "tiphead",
		tooltipBodyClass: "tipbody"
	}, methods = {
		get: function() {
			return this
		},
		show: function(pos, callback) {
			var $tooltip = this.stop(true, true),
				options = methods._getOptions($tooltip);
			methods._forceViewport(pos, $tooltip);
			options._status.display = "showing";
			if ($.browser.msie && Number($.browser.version.split(".")[0]) < 9) {
				$tooltip.stop(true, false).css(pos).delay(options.showAnimateDelay).show(1, function() {
					$tooltip.css(pos).show();
					options._status.display = "show"
				})
			} else {
				$tooltip.stop(true, false).css(pos).css({
					opacity: options.hideOpacity
				}).delay(options.showAnimateDelay).show(1).animate({
					opacity: options.showOpacity
				}, options.showAnimateTime, function() {
					$tooltip.css({
						opacity: options.showOpacity
					});
					options._status.display = "show";
					$.isFunction(callback) && callback.call($tooltip, null)
				})
			}
			if (options.isMonitorSize) {
				var monitorTarget = options.isPublicMonitor ? publicOptions : options,
					fn = monitorTarget._monitor ||
				function() {
					var callee = arguments.callee,
						tooltips = callee.tooltips,
						orders = [];
					sizes = callee.sizes || (callee.sizes = {}), fn = function() {
						var callee = arguments.callee,
							tooltips = callee.tooltips,
							orders = callee.orders,
							index = callee.index,
							$tooltip = tooltips[orders[index]];
//						if ($tooltip && $tooltip.is(":visible") && id) {
//							var size = sizes[id],
//								width = $tooltip.outerWidth(),
//								height = $tooltip.outerHeight();
//							if (size) {
//								if (size.width !== width || size.height !== height) {
//									size.width = width;
//									size.height = height;
//									try {
//										methods._positionAdjustByContent($tooltip)
//									} catch (e) {
//										if ($tooltip.parent().length === 0) {
//											$.tooltip("destroy", $tooltip)
//										}
//									}
//								}
//							} else {
//								sizes[id] = {
//									width: width,
//									height: height
//								}
//							}
//						}
						callee.index = index++;
						if (orders.length > index) {
							setTimeout(callee)
						}
					};
					if (!tooltips) {
						tooltips = {};
						$.each(methods._getTooltipStore(), function(id, $tooltip) {
							var options = methods._getOptions($tooltip);
							if (options && options.isPublicMonitor) {
								tooltips[id] = $tooltip
							}
						})
					}
					$.each(tooltips, function(id) {
						orders.push(id)
					});
					$.extend(fn, {
						orders: orders,
						tooltips: tooltips,
						index: 0
					});
					fn.call(null)
				};
				if ($.isFunction(fn)) {
					if (!options.isPublicMonitor) {
						fn.tooltips = {};
						fn.tooltips[options.id] = $tooltip
					}
					monitorTarget._monitor = setInterval(fn, options.isPublicMonitor ? publicOptions.monitorSizeTime : options.monitorSizeTime)
				}
			}
			return $tooltip
		},
		hide: function() {
			var $tooltip = this,
				options = methods._getOptions($tooltip);
			if (options._status.display !== "moving") {
				this.stop(true, true)
			}
			options._status.display = "hiding";
			if ($.browser.msie && Number($.browser.version.split(".")[0]) < 9) {
				$tooltip.stop(true, false).delay(options.hideAnimateDelay).hide(1, function() {
					$tooltip.hide();
					options._status.display = "hide"
				})
			} else {
				$tooltip.stop(true, false).delay(options.hideAnimateDelay).animate({
					opacity: options.hideOpacity
				}, options.hideAnimateTime, function() {
					$tooltip.css({
						opacity: options.hideOpacity
					}).hide(1);
					options._status.display = "hide"
				})
			}
			if (options._monitor) {
				clearInterval(options._monitor);
				delete options._monitor
			}
			return $tooltip
		},
		is: function(selector) {
			return this.is(selector)
		},
		move: function(pos) {
			var $tooltip = this,
				options = methods._getOptions($tooltip);
			if (options._status.display === "showing" || options._status.display === "show" || options._status.display === "moving") {
				var callee = arguments.callee,
					excute = function(pos) {
						this.stop(true, options._status.display !== "moving");
						options._status.display = "moving";
						this.delay(options.moveAnimateDelay).animate(pos, options.moveAnimateTime, function() {
							$(this).css(pos);
							options._status.display = "show"
						})
					};
				if (options._status.display === "showing") {
					callee.delayMove = pos;
					$tooltip.queue(function() {
						var $this = $(this);
						if (callee.delayMove != null) {
							methods._forceViewport(callee.delayMove, $tooltip);
							excute.call($this, callee.delayMove);
							callee.delayMove = null
						}
						$this.dequeue()
					})
				} else {
					methods._forceViewport(pos, $tooltip);
					excute.call($tooltip, pos)
				}
			}
			return $tooltip
		},
		pos: function(pos) {
			var $tooltip = this;
			if (pos) {
				methods._forceViewport(pos, $tooltip);
				$tooltip.css(pos)
			} else {
				return $tooltip.position()
			}
		},
		addContent: function($content) {
			var $tooltip = this,
				options = methods._getOptions($tooltip);
			if (options.isInitBody) {
				$tooltip.find("." + keys.tooltipBodyClass).append($content);
				methods._positionAdjustByContent($tooltip)
			}
		},
		removeContent: function(selector) {
			var $tooltip = this,
				$content = methods.getContent.call($tooltip, selector);
			if ($content && $content.length > 0) {
				$content.each(function() {
					$(this).remove()
				});
				methods._positionAdjustByContent($tooltip)
			}
			return $content
		},
		getContent: function(selector) {
			var $tooltip = this,
				options = methods._getOptions($tooltip),
				$content = null;
			if (options.isInitBody) {
				var $tipbody = $tooltip.find("." + keys.tooltipBodyClass);
				if (selector) {
					$content = $tipbody.find(selector)
				} else {
					$content = $tipbody.children()
				}
			}
			return $content
		},
		clear: function() {
			var $tooltip = this,
				options = methods._getOptions($tooltip);
			if (options.isInitBody) {
				$tooltip.find("." + keys.tooltipBodyClass).empty();
				methods._positionAdjustByContent($tooltip)
			}
		},
		changeTitle: function(title) {
			var $tooltip = this,
				options = methods._getOptions($tooltip);
			if (options.isInitHead) {
				$tooltip.find("." + keys.tooltipHeadClass).empty().append(title)
			}
		},
		options: function() {
			return methods._getOptions(this)
		},
		existed: function() {
			return this && (this.length > 0) ? true : false
		},
		destroy: function() {
			var $tooltip = this,
				options = methods._getOptions($tooltip),
				id = methods._getTooltipId(options.id);
			if (options._monitor) {
				clearInterval(options._monitor);
				delete options._monitor
			}
			$tooltip.remove();
			delete methods._getTooltipStore()[id]
		},
		_init: function(options) {
			options = $.extend({}, defaults, options);
			options._status = {};
			var id = methods._getTooltipId(options.id),
				$tooltip = $("<div/>").addClass(keys.tooltipClass).addClass(options.skin).css({
					width: options.width,
					left: options.left,
					top: options.top
				});
			if (options.display) {
				$tooltip.show();
				options._status.display = "show"
			} else {
				$tooltip.hide();
				options._status.display = "hide"
			}
			if (options.isInitHead) {
				$("<div/>").addClass(keys.tooltipHeadClass).append(options.title).appendTo($tooltip)
			}
			if (options.isInitBody) {
				$("<div/>").addClass(keys.tooltipBodyClass).append(options.content).appendTo($tooltip)
			}
			$tooltip.data("options", options);
			var $parent = $(options.parent),
				$container = $parent.children("." + keys.tooltipContainerClass);
			if (!$container || !$container.length) {
				$container = $("<div/>").addClass(keys.tooltipContainerClass).appendTo($parent)
			}
			$container.append($tooltip);
			methods._getTooltipStore()[id] = $tooltip;
			return $tooltip
		},
		_positionAdjustByContent: function($tooltip) {
			var options = methods._getOptions($tooltip),
				method = methods[options.adjustMethodByMonitor] || methods.move;
			method.call($tooltip, {
				left: options._status.focusLeft,
				top: options._status.focusTop
			})
		},
		_forceViewport: function(position, $tooltip) {
			var options = methods._getOptions($tooltip),
				$parent = $(options.parent),
				fineTuneLeft = $.isFunction(options.offsetLeft) ? options.offsetLeft.call($tooltip, null) : options.offsetLeft,
				fineTuneRight = $.isFunction(options.offsetRight) ? options.offsetRight.call($tooltip, null) : options.offsetRight,
				fineTuneTop = $.isFunction(options.offsetTop) ? options.offsetTop.call($tooltip, null) : options.offsetTop,
				fineTuneBottom = $.isFunction(options.offsetBottom) ? options.offsetBottom.call($tooltip, null) : options.offsetBottom,
				posLeft = $.isFunction(options.posLeft) ? options.posLeft.call($tooltip, null) : options.posLeft,
				posTop = $.isFunction(options.posTop) ? options.posTop.call($tooltip, null) : options.posTop,
				posWidth = ($.isFunction(options.posWidth) ? options.posWidth.call($tooltip, null) : options.posWidth) || $parent.width(),
				posHeight = ($.isFunction(options.posHeight) ? options.posHeight.call($tooltip, null) : options.posHeight) || $parent.height(),
				extra1 = null,
				extra2 = null,
				tmpTop, tmpLeft, tmpTop2, tmpLeft2, xPosition = "right",
				yPosition = "below";
			$.extend(options._status, {
				focusLeft: position.left,
				focusTop: position.top
			});
			if (position.left) {
				tmpLeft = position.left + fineTuneRight;
				extra1 = tmpLeft + $tooltip.outerWidth() - (posWidth + posLeft);
				if (extra1 > 0) {
					tmpLeft2 = position.left - fineTuneLeft;
					extra2 = tmpLeft2 - $tooltip.outerWidth() - posLeft;
					if (extra2 < 0) {
						if (extra1 + extra2 > 0) {
							xPosition = "left";
							position.left = tmpLeft2 - $tooltip.outerWidth()
						} else {
							position.left = tmpLeft
						}
					} else {
						xPosition = "left";
						position.left = tmpLeft2 - $tooltip.outerWidth()
					}
				} else {
					position.left = tmpLeft
				}
				if (position.left < posLeft) {
					position.left = posLeft
				}
				if ((position.left + $tooltip.outerWidth() > posWidth + posLeft) && (posWidth + posLeft - $tooltip.outerWidth() >= 0)) {
					position.left = posWidth + posLeft - $tooltip.outerWidth()
				}
			}
			if (position.top) {
				tmpTop = position.top + fineTuneBottom;
				extra1 = tmpTop + $tooltip.outerHeight() - (posHeight + posTop);
				if (extra1 > 0) {
					tmpTop2 = position.top - fineTuneTop;
					extra2 = tmpTop2 - $tooltip.outerHeight() - posTop;
					if (extra2 < 0) {
						if (extra1 + extra2 > 0) {
							yPosition = "above";
							position.top = tmpTop2 - $tooltip.outerHeight()
						} else {
							position.top = tmpTop
						}
					} else {
						yPosition = "above";
						position.top = tmpTop2 - $tooltip.outerHeight()
					}
				} else {
					position.top = tmpTop
				}
				if (position.top < posTop) {
					position.top = posTop
				}
				if ((position.top + $tooltip.outerHeight() > posHeight + posTop) && (posHeight + posTop - $tooltip.outerHeight() >= 0)) {
					position.top = posHeight + posTop - $tooltip.outerHeight()
				}
			}
			$.extend(options._status, {
				xPosition: xPosition,
				yPosition: yPosition
			});
			return position
		},
		_getTooltipStore: function() {
			var store = $("body").data(keys.storeId);
			if (!store) {
				store = {};
				$("body").data(keys.storeId, store)
			}
			return store
		},
		_getTooltip: function(id) {
			return $.type(id) === "object" && id instanceof $ ? id : methods._getTooltipStore()[methods._getTooltipId(id)]
		},
		_getTooltipId: function(id) {
			return id + "-jquery.tooltip"
		},
		_getOptions: function($tooltip) {
			return $tooltip.data("options")
		}
	};
	$.tooltip = function() {
		var arg0 = arguments[0];
		if (methods[arg0]) {
			var arg1 = arguments[1],
				$tooltip = methods._getTooltip(arg1);
			if ($tooltip) {
				return methods[arg0].apply($tooltip, Array.prototype.slice.call(arguments, 2))
			}
			return null
		} else {
			if (typeof arg0 === "object" || !arg0) {
				return methods._init.apply(null, arguments)
			} else {
				$.error("Method " + arg0 + " does not exist on jquery.tooltip.");
				return this
			}
		}
	}
})(jQuery);