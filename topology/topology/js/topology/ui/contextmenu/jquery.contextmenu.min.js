(function($) {
	var styles = {
		popupDiv: "jqCtxMenu",
		separator: "separator",
		hover: "hover",
		disabled: "disabled"
	},
		defaults = {
			menu: null,
			mouseButton: "right",
			minWidth: 120,
			maxWidth: 0,
			isKeyboard: true,
			animateDelay: 300,
			isHoverIntent: true,
			hoverIntentDelay: 400,
			horizAnimateName: ""
		},
		menus = [],
		methods = {
			init: function(options) {
				options = $.extend({}, defaults, options);
				if (!options.menu) {
					return false
				}
				var $menu;
				if ((typeof(options.menu) === "object") && (options.menu.constructor.toString().match(/array/i) !== null || options.menu.length)) {
					if ($("." + styles.popupDiv).length > 0) {
						$("." + styles.popupDiv).remove()
					}
					$menu = $("<div/>").append(buildMenu(options.menu));
					$("body").append($menu);
					$menu.data("jqctxDynamic", true)
				} else {
					$.error("illegal menu!")
				}
				return this.each(function() {
					var $this = $(this),
						eventNamespace = "jqctxContext-" + (new Date().getTime());
					$this.data("jqctxEventNamespace", eventNamespace).data("jqctxOptions", options).data("jqctxMenu", $menu).data("jqctxEnable", true);
					if (!$menu.data("jqctxOwners")) {
						$menu.data("jqctxOwners", [])
					}
					$menu.data("jqctxOwners").push($this);
					menus.push($menu);
					methods.refresh.call($this);
					$this.bind((options.mouseButton + "." + eventNamespace), function(e) {
						if (!$this.data("jqctxEnable")) {
							return true
						}
						methods.show.apply($this, [e.pageX, e.pageY]);
						if (options.keyboard) {
							$(window).bind("keydown." + eventNamespace, function(even) {
								var $currentItem;
								switch (event.keyCode) {
								case 27:
									$(document).trigger("click." + eventNamespace);
									break;
								case 40:
									if ($menu.find("li." + styles.hover).length === 0) {
										$menu.find("li:not(.disabled):first").addClass(styles.hover)
									} else {
										$currentItem = $menu.find("li." + styles.hover + ":last");
										$currentItem.parent().find("li." + styles.hover).removeClass(styles.hover).nextAll("li:not(.disabled)").eq(0).addClass(styles.hover);
										if ($currentItem.parent().find("li." + styles.hover).length === 0) {
											$currentItem.parent().find("li:not(.disabled):first").addClass(styles.hover)
										}
									}
									return false;
								case 38:
									if ($menu.find("li." + styles.hover).length === 0) {
										$menu.find("li:not(.disabled):first").nextAll().eq(-1).addClass(styles.hover)
									} else {
										$currentItem = $menu.find("li." + styles.hover + ":last");
										$currentItem.parent().find("li." + styles.hover).removeClass(styles.hover).prevAll("li:not(.disabled)").eq(0).addClass(styles.hover);
										if ($currentItem.parent().find("li." + styles.hover).length === 0) {
											$currentItem.parent().find("li:first").nextAll().eq(-1).addClass(styles.hover)
										}
									}
									return false;
								case 39:
									if ($menu.find("li." + styles.hover + " ul").length > 0) {
										$menu.find("li." + styles.hover + ":last").find("ul:first").slideDown(options.animateDelay).offset(forceViewport({
											top: $menu.find("li." + styles.hover + ":last").offset().top
										}, $menu.find("li." + styles.hover + ":last").find("ul:first")));
										$menu.find("li." + styles.hover + ":last ul:first li:not(.disabled):first").addClass(styles.hover)
									}
									return false;
								case 37:
									if (!$menu.find("li." + styles.hover + ":last").parent().parent().hasClass(styles.popupDiv)) {
										$menu.find("li." + styles.hover + ":last").removeClass(styles.hover).parent().fadeOut(options.animateDelay)
									}
									return false
								}
								return true
							})
						}
						return false
					});
					$menu.find("li:not(.disabled)").each(function() {
						$(this).click(function() {
							var _action = $.trim($("div:first", $(this)).attr("action"));
							if (_action !== "") {
								var _funName = null,
									_funPara = null;
								if (_action.split("(").length > 1 && _action.lastIndexOf(")") === (_action.length - 1)) {
									_funName = _action.substring(0, _action.indexOf("("));
									_funPara = _action.substring(_action.indexOf("(") + 1, _action.length - 1).split(",")
								} else {
									_funName = _action;
									_funPara = []
								}
								eval(_funName).apply(this, _funPara)
							}
						})
					})
				})
			},
			refresh: function(options) {
				var opts;
				return this.each(function() {
					var $this = $(this),
						$menu = $this.data("jqctxMenu"),
						calculatedWidth, $widthTest;
					opts = $.extend($this.data("jqctxOptions"), options);
					if (opts.isHoverIntent && !$.fn.hoverIntent) {
						opts.isHoverIntent = false
					}
					$menu.removeClass(styles.popupDiv);
					$("li", $menu).removeClass(styles.hover);
					$("span", $menu).remove();
					$menu.addClass(styles.popupDiv);
					$widthTest = $("<div/>").addClass(styles.popupDiv).appendTo("body");
					$("ul", $menu).each(function() {
						$widthTest.html("");
						calculatedWidth = 0;
						$widthTest.html($(this).html());
						calculatedWidth = $widthTest.width() + 16;
						if (calculatedWidth < opts.minWidth) {
							calculatedWidth = opts.minWidth
						}
						if (calculatedWidth > opts.maxWidth && opts.maxWidth > 0) {
							calculatedWidth = opts.maxWidth
						}
						$(this).width(calculatedWidth);
						$(this).children("li").children("ul").css("left", calculatedWidth)
					});
					$widthTest.remove();
					$("li:has(ul)", $menu).each(function() {
						if (!$(this).hasClass(styles.disabled)) {
							$("div:first", this).append($("<span/>"));
							if (opts.isHoverIntent) {
								$(this).hoverIntent({
									over: function() {
										open.call(this, opts)
									},
									out: function() {
										close.call(this, opts)
									},
									timeout: opts.hoverIntentDelay
								})
							} else {
								$(this).hover(function() {
									open.call(this, opts)
								}, function() {
									close.call(this, opts)
								})
							}
						}
					});
					$("li", $menu).each(function() {
						if (!$(this).hasClass(styles.disabled)) {
							$(this).click(function() {
								if ($("ul", this).length < 1) {
									$("li", $menu).unbind("click");
									$menu.fadeOut(opts.animateDelay)
								}
								return false
							})
						}
						$(this).hover(function() {
							$(this).parent().find("li." + styles.hover).removeClass(styles.hover);
							$(this).addClass(styles.hover)
						}, function() {
							$(this).removeClass(styles.hover)
						})
					})
				});

				function open(opts) {
					var $cover, $sm, $item = $(this),
						left, top, spare = 20;
					$cover = $item.children(".cover");
					$sm = $cover.children("ul").stop(true, true);
					$cover.show();
					left = $item.parent().width();
					top = $item.position().top;
					$cover.css({
						left: left,
						top: top,
						width: $sm.outerWidth() + spare,
						height: $sm.outerHeight(),
						overflow: "hidden"
					});
					var pos1 = $cover.offset();
					var pos2 = $.extend({}, pos1);
					forceViewport(pos2, $cover, true);
					var vAdjust = pos2.top < pos1.top;
					if (vAdjust) {
						$cover.css({
							top: top + $item.outerHeight() - $cover.outerHeight()
						})
					}
					var hReverse = pos2.left < pos1.left;
					if (hReverse) {
						left = -$cover.width();
						$cover.css({
							left: left
						});
						$sm.css({
							left: $cover.width()
						}).animate({
							left: spare
						}, opts.animateDelay, opts.horizAnimateName, function() {
							$cover.css({
								left: left + spare,
								width: $sm.outerWidth(),
								overflow: "visible"
							});
							$sm.css({
								left: 0
							})
						})
					} else {
						$sm.css({
							left: -(left + 5)
						}).animate({
							left: 0
						}, opts.animateDelay, opts.horizAnimateName, function() {
							$cover.css({
								width: $sm.outerWidth(),
								overflow: "visible"
							})
						})
					}
				}
				function close(opts) {
					var $cover, $sm, left;
					$cover = $(this).children(".cover");
					$sm = $cover.children("ul").stop(true, true);
					$cover.css({
						overflow: "hidden"
					});
					left = $cover.position().left < 0 ? $sm.width() : -($sm.width() + 5);
					$sm.animate({
						left: left
					}, opts.animateDelay, opts.horizAnimateName, function() {
						$cover.hide()
					})
				}
			},
			restore: function() {
				return this.each(function() {
					var $this = $(this),
						$menu = $this.data("jqctxMenu");
					$this.unbind("." + $this.data("jqctxEventNamespace"));
					$(window).unbind("keydown." + $this.data("jqctxEventNamespace"));
					$(document).unbind("click." + $this.data("jqctxEventNamespace"));
					$.each($menu.data("jqctxOwners"), function(index) {
						if ($this[0] === this) {
							$menu.data("jqctxOwners").splice(index, 1)
						}
					});
					if ($menu.data("jqctxOwners").length < 1) {
						$.each(menus, function(index) {
							if ($menu[0] === this) {
								menus.splice(index, 1)
							}
						});
						if ($menu.data("jqctxDynamic")) {
							$menu.remove()
						}
					}
					$this.removeData("jqctxEventNamespace");
					$this.removeData("jqctxMenu");
					$this.removeData("jqctxOptions");
					$this.removeData("jqctxEnable")
				})
			},
			show: function(x, y) {
				if (!x || !y) {
					$.error("The position for the menu has not been specified");
					return false
				}
				var $menu = $(this).first().data("jqctxMenu");
				var visibility = $menu.css("visibility");
				$menu.css("visibility", "hidden").data("jqctxMenu", $(this));
				var pos = forceViewport({
					top: y,
					left: x
				}, $menu, true);
				$menu.offset(pos).css("visibility", visibility);
				if (y > pos.top) {
					var h = $menu.height(),
						t = pos.top;
					$menu.css({
						height: 0,
						top: t + h
					}).show().animate({
						height: h,
						top: t
					}, defaults.animateDelay)
				} else {
					$menu.slideDown(defaults.animateDelay)
				}
				return this
			},
			hide: function() {
				$.each(menus, function() {
					$("." + styles.hover, this).removeClass(styles.hover);
					$("ul:first ul", this).fadeOut(defaults.animateDelay);
					if ($(this).data("jqctxMenu")) {
						$(this).removeData("jqctxMenu")
					}
					$(this).fadeOut(defaults.animateDelay)
				});
				return this
			},
			disable: function(item) {
				if (item) {
					var $menu = $(this).data("jqctxMenu");
					if (item.charAt(0) === "") {
						$("li" + item.replace(/ /g, "_"), $menu).addClass(styles.disabled)
					} else {
						$('div[action="' + item + '"]', $menu).parent().addClass(styles.disabled)
					}
				} else {
					$(this).data("jqctxEnable", false)
				}
				return this
			},
			enable: function(item) {
				if (item) {
					var $menu = $(this).data("jqctxMenu");
					if (item.charAt(0) === "") {
						$("li" + item.replace(/ /g, "_"), $menu).removeClass(styles.disabled)
					} else {
						$('div[action="' + item + '"]', $menu).parent().removeClass(styles.disabled)
					}
				} else {
					$(this).data("jqctxEnable", true);
					$("li", this).each(function() {
						$(this).removeClass(styles.disabled)
					})
				}
				return this
			}
		},
		forceViewport = function(position, o, mouse) {
			if (position.top) {
				if ((position.top + o.height() - $(window).scrollTop()) > $(window).height()) {
					if (mouse) {
						position.top = position.top - o.height()
					} else {
						position.top = $(window).height() + $(window).scrollTop() - o.height()
					}
				}
				if (position.top < $(window).scrollTop()) {
					position.top = $(window).scrollTop()
				}
			}
			if (position.left) {
				if ((position.left + o.width() - $(window).scrollLeft() > $(window).width())) {
					position.left = $(window).width() - o.width() + $(window).scrollLeft()
				}
				if (position.left < $(window).scrollLeft()) {
					position.left = $(window).scrollLeft()
				}
			}
			return position
		},
		buildMenu = function(children) {
			var ul = $("<ul/>"),
				entry, item, li;
			if (children) {
				for (entry in children) {
					item = children[entry];
					if (item.hidden) {
						continue
					}
					li = $("<li/>").attr("id", item.id.replace(/ /g, "_")).append($("<div/>").attr("action", item.action ? item.action : "").text(item.text));
					if (item.image) {
						li.append($("<img/>").attr("src", item.image))
					}
					if (item.separator) {
						li.addClass(styles.separator)
					}
					if (item.disabled) {
						li.addClass(styles.disabled)
					}
					ul.append(li);
					if (item.children) {
						li.append(buildMenu(item.children))
					}
				}
			}
			return $("<div class='cover'/>").append(ul)
		};
	$.fn.ContextMenu = function(method) {
		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1))
		} else {
			if (typeof method === "object" || !method) {
				return methods.init.apply(this, arguments)
			} else {
				$.error("Method " + method + " does not exist on jquery.contextmenu");
				return this
			}
		}
	}
})(jQuery);