(function($) {
	function ContextMenuAdapter() {
		this._ctxContainer = {}
	}
	function _ctxIntersection(arrays, fields) {
		if (!arrays || arrays.length === 0) {
			return []
		}
		if (arrays.length === 1) {
			return arrays[0]
		}
		var separator = "||",
			_src = _ctxObject2Fields(arrays[0], fields, separator);
		for (var i = 1, len = arrays.length; i < len; i++) {
			var _target = _ctxObject2Fields(arrays[i], fields, separator);
			_src = $(_src).filter(_target)
		}
		var keyword = ";";
		for (var i = 0, len = _src.length; i < len; i++) {
			keyword += _src[i].split(separator)[0] + ";"
		}
		return _ctxRebuildMenu(arrays[0], fields[0], keyword)
	}
	function _ctxObject2Fields(obj, fields, separator) {
		var array = [];
		if (jQuery.isPlainObject(obj)) {
			var fieldStr = "";
			for (var i = 0, len = fields.length; i < len; i++) {
				if (obj[fields[i]] !== null && typeof(obj[fields[i]]) != "undefined") {
					fieldStr += obj[fields[i]] + separator
				}
			}
			array.push(fieldStr.substr(0, fieldStr.length - separator.length));
			if (obj.children) {
				array = array.concat(_ctxObject2Fields(obj.children, fields, separator))
			}
		} else {
			if (jQuery.isArray(obj)) {
				for (var i = 0, len = obj.length; i < len; i++) {
					var _tmpArr = _ctxObject2Fields(obj[i], fields, separator);
					if (_tmpArr.length === 1) {
						array.push(_tmpArr[0])
					} else {
						array = array.concat(_tmpArr)
					}
				}
			}
		}
		return array
	}
	function _ctxRebuildMenu(menu, field, keywords) {
		if (jQuery.isArray(menu)) {
			for (var i = 0, len = menu.length; i < len; i++) {
				var item = menu[i];
				if (item.children) {
					item.children = _ctxRebuildMenu(item.children, field, keywords)
				} else {
					var regexp = new RegExp(";" + item[field] + ";", "gi");
					if (keywords.search(regexp) === -1) {
						item.hidden = true
					}
				}
			}
			return menu
		} else {
			return []
		}
	}
	$.extend(ContextMenuAdapter.prototype, {
		menu: function() {
			var _selector = $.topology.selector,
				isSingleTarget = _selector.size() <= 1,
				target = null,
				menuArray = null;
			if (isSingleTarget) {
				target = $.topology.contextObj;
				var elementType = this._getTargetType(target);
				menuArray = this._ctxContainer[elementType];
				if (!menuArray || typeof(menuArray) == "undefined" || menuArray.length === 0) {
					menuArray = this._load(elementType);
					if ((!menuArray || !menuArray.length) && $.topology.isSymbol(target)) {
						menuArray = this._load("symbol")
					}
					this._ctxContainer[elementType] = menuArray
				}
				return $.hydraExtend(true, [], this._validate(menuArray))
			} else {
				var elementsType = this._classify(_selector.selected()),
					classifyValidate = [];
				for (var type in elementsType) {
					menuArray = this._ctxContainer[type];
					if (!menuArray) {
						menuArray = this._load(type);
						this._ctxContainer[type] = menuArray
					}
					var menuValidated = [];
					for (var i = 0, len = elementsType[type].length; i < len; i++) {
						$.topology.contextObj = elementsType[type][i];
						menuValidated = $.hydraExtend(true, [], menuValidated, this._validate(menuArray))
					}
					classifyValidate.push(menuValidated)
				}
				return _ctxIntersection(classifyValidate, ["text", "disabled", "action"])
			}
		},
		change: function(id, target, item) {
			if (!id || id === "") {
				return
			}
			var menuArr = this._ctxContainer[id],
				menu = this.find(menuArr, target);
			if (!menu) {
				return
			}
			for (var key in item) {
				if (key === "icon") {
					menu["image"] = item[key]
				} else {
					menu[key] = item[key]
				}
			}
		},
		find: function(menus, target) {
			if (!menus || !$.isArray(menus) || menus.length === 0) {
				return null
			}
			if (!target || jQuery.isEmptyObject(target)) {
				return null
			}
			var menu = null;
			for (var i = 0, len = menus.length; i < len; i++) {
				var isEqual = false;
				for (var key in target) {
					if (menus[i][key] === target[key]) {
						isEqual = true
					} else {
						isEqual = false;
						break
					}
				}
				if (isEqual) {
					menu = menus[i]
				} else {
					if (menus[i].children) {
						menu = this.find(menus[i].children, target)
					}
				}
				if (menu) {
					break
				}
			}
			return menu
		},
		_getTargetType: function(target) {
			if (!target) {
				return ""
			}
//			if ($.topology.status === "SHOW") {
			if (target.objectClass) {
				return target.objectClass
			}
//			}
			if (target instanceof hy.topology.model.View) {
				return "view"
			}
			if (target instanceof hy.topology.model.Symbol) {
				return "symbol"
			}
			if (target instanceof hy.topology.model.Container) {
				return "container"
			}
			if (target instanceof hy.topology.model.Line) {
				return "line"
			}
			if (target instanceof hy.topology.model.Lineseter) {
				return "lseter"
			}
		},
		_load: function(id) {
//			return $.topology.status === "SHOW" ? topoData.config.contextmenu4show[id] : topoData.config.contextmenu4edit[id]
			return topoData.config.contextmenu4show[id]
		},
		_classify: function(selected) {
			var elements = {};
			for (var name in selected) {
				for (var i = 0, len = selected[name].length; i < len; i++) {
					var id = selected[name][i],
						element = $.topology.shapes[name][id],
						type = this._getTargetType(element);
					if (!elements[type] || !jQuery.isArray(elements[type])) {
						elements[type] = []
					}
					elements[type].push(element)
				}
			}
			return elements
		},
		_cfg2obj: function(xmlNodes) {
			if (!xmlNodes || xmlNodes.length === 0) {
				return {}
			}
			var menu = [],
				isLine = false,
				puuid = arguments[1] ? arguments[1] + "." : "1.";
			for (var i = 0, len = xmlNodes.length; i < len; i++) {
				if (xmlNodes[i].nodeName === "#comment" || xmlNodes[i].nodeName === "#text") {
					continue
				}
				var item = {};
				var visible = xmlNodes[i].getAttribute("visible") ? xmlNodes[i].getAttribute("visible") : null;
				var available = xmlNodes[i].getAttribute("available") ? xmlNodes[i].getAttribute("available") : null;
				var type = xmlNodes[i].getAttribute("type").toUpperCase();
				if (type === "LINE") {
					isLine = true;
					continue
				}
				if (type === "ACTIVE") {
					var action = xmlNodes[i].getAttribute("action");
					if (!action || $.trim(action) === "") {
						$.error("context menu type of item is ACTIVE, but action is empty!")
					} else {
						item.id = "active";
						item.action = action;
						menu.push(item)
					}
					continue
				}
				if (type === "EXTEND") {
					var extendId = xmlNodes[i].getAttribute("id");
					if (!extendId || $.trim(extendId) === "") {
						$.error("context menu type of item is EXTEND, but id is empty!")
					} else {
						menu = menu.concat(this._load(extendId, "2"))
					}
					continue
				}
				item.id = puuid + (i + 1);
				if (type === "GROUP") {
					item.children = this._cfg2obj(xmlNodes[i].childNodes, item.id)
				}
				item.text = xmlNodes[i].getAttribute("text");
				if (xmlNodes[i].getAttribute("icon") != null) {
					item.image = xmlNodes[i].getAttribute("icon")
				}
				if (xmlNodes[i].getAttribute("action") != null) {
					item.action = xmlNodes[i].getAttribute("action")
				}
				if (isLine) {
					item.separator = true;
					isLine = false
				}
				if (visible && $.trim(visible) !== "") {
					item.visible = visible
				}
				if (available && $.trim(available) !== "") {
					item.available = available
				}
				menu.push(item)
			}
			return menu
		},
		_validate: function(menu) {
			if (jQuery.isPlainObject(menu)) {
				if (menu.visible) {
					menu.hidden = !$.hydraValidateExp(menu.visible)
				} else {
					if (menu.available) {
						menu.disabled = !$.hydraValidateExp(menu.available)
					}
				}
				if (menu.children) {
					menu.children = this._validate(menu.children)
				}
			} else {
				if (jQuery.isArray(menu)) {
					for (var i = 0, len = menu.length; i < len; i++) {
						menu[i] = this._validate(menu[i])
					}
				}
			}
			return menu
		}
	});
	$.ctxAdapter = new ContextMenuAdapter()
})(jQuery);