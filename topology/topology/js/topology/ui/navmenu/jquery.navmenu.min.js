(function() {
	var keys = null,
		defaults = null,
		methods = null,
		identifiers = null;
	identifiers = {}, keys = {
		name: "jqnavmenu",
		topClass: "navmenu",
		navClass: "nav",
		navBlockClass: "block",
		coverClass: "cover",
		menuClass: "menu",
		itemClass: "nmitem",
		itemOnClass: "on",
		itemParentClass: "parent",
		itemDisabledClass: "disabled",
		itemIconClass: "nmitemicon",
		optionKey: "navmenu-options",
		itemConfigKey: "item-config",
		childMenuStatusKey: "child-menu-status",
		openMenuEvent: "openMenu",
		closeMenuEvent: "closeMenu",
		blockOverIndexKey: "block-over-index",
		autoCloseEvent: "autoClose"
	}, defaults = {
		menu: null,
		blockMoveTime: 500,
		blockMoveAnimate: "easeOutBack",
		menuVOpenTime: 300,
		menuVOpenDelay: 100,
		menuVOpenAnimate: "easeOutBack",
		menuVCloseTime: 200,
		menuVCloseDelay: 100,
		menuVCloseAnimate: undefined,
		menuHOpenTime: 300,
		menuHOpenDelay: 500,
		menuHOpenAnimate: "easeOutBack",
		menuHCloseTime: 200,
		menuHCloseDelay: 200,
		menuHCloseAnimate: undefined,
		autoCloseEvent: "mousedown",
		skin: "lightblue"
	}, methods = {
		close: function(id) {
			if (arguments.length === 1 && id != null) {
				var $this = $(this),
					options = methods.options.call($this, null),
					$li = methods.item.call($this, id);
				return $li.each(function() {
					var $li = $(this);
					if ($li.parent().is("ul." + keys.navClass)) {
						options._menu_on = false
					}
					$li.trigger(keys.closeMenuEvent, options)
				})
			} else {
				return this.each(function() {
					var $this = $(this),
						options = methods.options.call($this, null),
						$ul = $this.children("." + keys.topClass).children("ul." + keys.navClass);
					options._menu_on = false;
					$ul.children("li." + keys.itemClass).each(function() {
						$(this).trigger(keys.closeMenuEvent, options)
					})
				})
			}
		},
		setDisabled: function(id, status) {
			return this.each(function() {
				var $this = $(this),
					$li = methods.item.call($this, id),
					blockHandler = function(status) {
						var $block = $this.children("." + keys.topClass).children("ul." + keys.navClass).children("." + keys.navBlockClass);
						if ($li.parent().is("." + keys.navClass) && $li.index() === $block.data(keys.blockOverIndexKey)) {
							methods._disabledBlock.call($block, status);
							return true
						}
						return false
					};
				if ($li && methods.isDisabled.call($this, $li) != status) {
					if (status) {
						methods._disabledItem.call($li, true);
						blockHandler(true);
						methods.close.call($this, $li)
					} else {
						methods._disabledItem.call($li, false);
						if (blockHandler(false)) {
							$li.trigger("mouseenter")
						} else {
							if ($li.is("." + keys.itemOnClass)) {
								$li.trigger("mouseenter")
							}
						}
					}
				}
			})
		},
		isDisabled: function(id) {
			var $this = this,
				$li = null;
			if (id instanceof $ && id.is("." + keys.itemClass)) {
				$li = id
			} else {
				$li = methods.item.call($this, id)
			}
			if ($li && $li.length) {
				return $li.is("." + keys.itemDisabledClass)
			} else {
				return $this
			}
		},
		setText: function(id, text) {
			return this.each(function() {
				var $this = $(this),
					$li = methods.item.call($this, id),
					config = $li.data(keys.itemConfigKey);
				config.text = text;
				$li && $li.children("a").text(text)
			})
		},
		setIcon: function(id, url) {
			return this.each(function() {
				var $this = $(this),
					$li = methods.item.call($this, id),
					config = $li.data(keys.itemConfigKey);
				config.icon = url;
				if ($li && !methods.isDisabled.call($this, $li)) {
					$li.children("img." + keys.itemIconClass).attr("src", url)
				}
			})
		},
		setDisIcon: function(id, url) {
			return this.each(function() {
				var $this = $(this),
					$li = methods.item.call($this, id),
					config = $li.data(keys.itemConfigKey);
				config.disicon = url;
				if ($li && methods.isDisabled.call($this, $li)) {
					$li.children("img." + keys.itemIconClass).attr("src", url)
				}
			})
		},
		item: function(id, $li) {
			var $this = this,
				options = methods.options.call($this, null),
				index = options._itemElementIndex;
			if (!index) {
				index = options._itemElementIndex = {}
			}
			if (arguments.length === 1) {
				if (id instanceof $ && id.is("." + keys.itemClass)) {
					return id
				} else {
					return index[id]
				}
			} else {
				if (id && $li) {
					index[id] = $li
				}
			}
		},
		options: function() {
			return this.data(keys.optionKey)
		},
		destory: function() {
			return this.each(function() {
				var $this = $(this),
					options = methods.options.call($this, null);
				if (options) {
					$this.removeData(keys.optionKey).children("." + keys.topClass).remove();
					if (options.autoCloseEvent && options._identifier) {
						var eventName = options.autoCloseEvent + "." + keys.name + options._identifier;
						$(document).unbind(eventName)
					}
				}
			})
		},
		_init: function(opts) {
			return this.each(function() {
				var $this = $(this),
					options = $.extend({}, defaults, opts);
				methods.destory.call($this, null);
				$this.data(keys.optionKey, options);
				methods._generateIdentifier.call($this, null);
				methods._createNav.call($this, options.menu);
				methods._autoClose.call($this, null)
			})
		},
		_autoClose: function() {
			var $this = this,
				options = methods.options.call($this, null);
			if (options.autoCloseEvent && options._identifier) {
				var eventName = options.autoCloseEvent + "." + keys.name + options._identifier;
				$this.bind(eventName, options, function(event) {
					var options = event.data;
					$this.parent().trigger(options.autoCloseEvent, options._identifier);
					return false
				});
				$(document).bind(eventName, $this, function(event, id) {
					var $this = event.data,
						options = methods.options.call($this, null);
					if (options._identifier != id) {
						methods.close.call($this, null);
						$this.children("." + keys.topClass).children("ul." + keys.navClass).trigger("mouseleave")
					}
				})
			}
		},
		_createNav: function(menus) {
			if (!menus) {
				return
			}
			var $this = this,
				i = null,
				options = methods.options.call($this, null);
			$ul = $("<ul/>").addClass(keys.navClass).appendTo($("<div/>").addClass(keys.topClass + " " + options.skin).appendTo($this));
			$("<li/>").addClass(keys.navBlockClass).appendTo($ul);
			for (i = 0; i < menus.length; i++) {
				if (!menus[i].separator) {
					methods._createNavItem.call($this, $ul, menus[i])
				}
			}
			$ul.bind("mouseleave", function() {
				var $ul = $(this),
					$block = $ul.children("." + keys.navBlockClass);
				if (!options._menu_on) {
					$block.stop(true, false).fadeOut(function() {
						$(this).css("opacity", 0).hide();
						options._menu_on = false
					})
				}
			});
			if ($.browser.msie) {
				$ul.bind("selectstart", function(e) {
					return false
				})
			} else {}
		},
		_createNavItem: function($ul, menu) {
			var $this = this,
				options = methods.options.call($this, null),
				$li = methods._newItemObject.call($this, menu);
			$ul.append($li);
			$li.bind(keys.openMenuEvent, methods._openNavItem).bind(keys.closeMenuEvent, methods._closeNavItem).bind("mouseenter", function() {
				var $li = $(this),
					$block = $ul.children("." + keys.navBlockClass).data(keys.blockOverIndexKey, $li.index());
				if ($block.is(":hidden")) {
					if (methods.isDisabled.call($this, $li)) {
						methods._disabledBlock.call($block, true)
					} else {
						methods._disabledBlock.call($block, false)
					}
					$block.css({
						width: $li.outerWidth(),
						left: $li.position().left,
						opacity: 0
					}).show().stop(true, true).animate({
						opacity: 1
					}, function() {
						$(this).css("opacity", 1)
					})
				} else {
					var dst = {
						width: $li.outerWidth(),
						left: $li.position().left
					};
					$li.siblings().each(function() {
						var $li = $(this),
							$cover = $li.children("." + keys.coverClass);
						if ($cover.is(":visible")) {
							$li.trigger(keys.closeMenuEvent, options);
							return false
						}
					});
					if (!methods.isDisabled.call($this, $li)) {
						methods._disabledBlock.call($block, false)
					}
					$block.stop(true, false).css("opacity", 1).animate(dst, options.blockMoveTime, options.blockMoveAnimate, function() {
						$(this).css(dst);
						if (methods.isDisabled.call($this, $li)) {
							methods._disabledBlock.call($block, true)
						} else {
							if (options._menu_on) {
								$li.trigger(keys.openMenuEvent, options)
							}
						}
					})
				}
			}).bind("click", function(e) {
				var $li = $(this),
					$cover = $li.children("." + keys.coverClass),
					config = $li.data(keys.itemConfigKey);
				if (methods.isDisabled.call($this, $li)) {} else {
					if ($cover.length) {
						options._menu_on = !options._menu_on;
						if (options._menu_on) {
							$li.trigger(keys.openMenuEvent, options)
						} else {
							$li.trigger(keys.closeMenuEvent, options)
						}
					} else {
						options._menu_on = false;
						if ($.isFunction(config.action)) {
							config.action.call($li, config)
						}
					}
				}
				return false
			})
		},
		_createMenu: function($li, menus) {
			var $this = this,
				i = null,
				$ul = $("<ul/>").addClass(keys.menuClass).appendTo($("<div/>").addClass(keys.coverClass).appendTo($li));
			for (i = 0; i < menus.length; i++) {
				if (menus[i].separator) {
					methods._createSeparator.call($this, $ul, menus[i])
				} else {
					methods._createMenuItem.call($this, $ul, menus[i])
				}
			}
		},
		_createMenuItem: function($ul, menu) {
			var $this = this,
				options = methods.options.call($this, null),
				$li = methods._newItemObject.call(this, menu);
			$ul.append($li);
			$li.bind(keys.openMenuEvent, methods._openMenuItem).bind(keys.closeMenuEvent, methods._closeMenuItem).bind("mouseenter", function() {
				var $li = $(this);
				$li.addClass(keys.itemOnClass);
				if (methods.isDisabled.call($this, $li)) {} else {
					$li.trigger(keys.openMenuEvent, options)
				}
			}).bind("mouseleave", function() {
				var $li = $(this);
				$li.removeClass(keys.itemOnClass);
				$li.trigger(keys.closeMenuEvent, options)
			}).bind("click", function(e) {
				var $li = $(this),
					$cover = $li.children("." + keys.coverClass),
					config = $li.data(keys.itemConfigKey);
				if (methods.isDisabled.call($this, $li)) {} else {
					if (!$cover.length) {
						if ($.isFunction(config.action)) {
							config.action.call($li, config)
						}
						var $parents = $li.parents("li." + keys.itemClass);
						$parents.each(function(index, li) {
							var $li = $(li),
								cfg = null;
							$li.removeClass(keys.itemOnClass);
							if (index + 1 !== $parents.length) {
								cfg = {
									time: 0,
									delay: 0
								}
							}
							$li.trigger(keys.closeMenuEvent, [options, cfg])
						});
						options._menu_on = false;
						$li.parents("ul." + keys.navClass + ":first").trigger("mouseleave")
					}
				}
				return false
			})
		},
		_createSeparator: function($ul, menu) {
			if (menu && menu.separator) {
				$("<li/>").addClass("separator").append("<hr/>").appendTo($ul)
			}
		},
		_newItemObject: function(menu) {
			var $li = null;
			if (menu) {
				var $this = this,
					icon = menu.disabled ? (menu.disicon || menu.icon) : menu.icon;
				$li = $("<li/>").addClass(keys.itemClass);
				if (icon) {
					$("<img/>").addClass(keys.itemIconClass).attr("src", icon).appendTo($li)
				} else {
					$("<label/>").appendTo($li)
				}
				if (menu.text) {
					$("<a/>").text(menu.text).appendTo($li)
				}
				if (menu.children && menu.children.length) {
					$li.addClass(keys.itemParentClass).append("<span/>");
					methods._createMenu.call($this, $li, menu.children)
				}
				$li.data(keys.itemConfigKey, menu);
				methods.item.call($this, menu.id, $li);
				if (menu.disabled) {
					methods._disabledItem.call($li, true)
				}
			}
			return $li
		},
		_openNavItem: function(event, options, cfg) {
			var $li = $(this),
				$cover = $li.children("." + keys.coverClass);
			cfg = $.extend({
				delay: options.menuVOpenDelay,
				time: options.menuVOpenTime,
				animate: options.menuVOpenAnimate
			}, cfg);
			if ($cover.length && $li.data(keys.childMenuStatusKey) !== "open") {
				$li.data(keys.childMenuStatusKey, "open").addClass(keys.itemOnClass);
				var $menu = $cover.children(),
					height = $cover.height();
				$menu.css({
					top: -height - 10
				});
				$cover.css({
					height: height + 80,
					overflow: "hidden"
				}).show();
				$menu.stop(true, false).delay(cfg.delay).animate({
					top: 0
				}, cfg.time, cfg.animate, function() {
					$(this).css({
						height: "",
						top: 0
					});
					$cover.css({
						height: "",
						overflow: "visible"
					})
				})
			}
			return false
		},
		_closeNavItem: function(event, options, cfg) {
			var $li = $(this),
				$cover = $li.children("." + keys.coverClass);
			cfg = $.extend({
				delay: options.menuVCloseDelay,
				time: options.menuVCloseTime,
				animate: options.menuVCloseAnimate
			}, cfg);
			if ($cover.length && $li.data(keys.childMenuStatusKey) !== "close") {
				$li.data(keys.childMenuStatusKey, "close").removeClass(keys.itemOnClass);
				var $menu = $cover.children(),
					height = $cover.height();
				$cover.css({
					overflow: "hidden"
				});
				$menu.stop(true, false).delay(cfg.delay).animate({
					top: -height - 10
				}, cfg.time, cfg.animate, function() {
					$cover.css({
						height: ""
					}).hide()
				})
			}
			return false
		},
		_openMenuItem: function(event, options, cfg) {
			var $li = $(this),
				$cover = $li.children("." + keys.coverClass);
			cfg = $.extend({
				delay: options.menuHOpenDelay,
				time: options.menuHOpenTime,
				animate: options.menuHOpenAnimate
			}, cfg);
			if ($cover.length && $li.data(keys.childMenuStatusKey) !== "open") {
				$li.data(keys.childMenuStatusKey, "open");
				var width = $cover.width(),
					$menu = $cover.children();
				$menu.css({
					left: -width - 10
				});
				$cover.css({
					width: width + 50,
					overflow: "hidden"
				}).show();
				$menu.stop(true, false).delay(cfg.delay).animate({
					left: 0
				}, cfg.time, cfg.animate, function() {
					$(this).css({
						width: "",
						left: 0
					});
					$cover.css({
						width: "",
						overflow: "visible"
					})
				})
			}
			return false
		},
		_closeMenuItem: function(event, options, cfg) {
			var $li = $(this),
				$cover = $li.children("." + keys.coverClass);
			cfg = $.extend({
				delay: options.menuHCloseDelay,
				time: options.menuHCloseTime,
				animate: options.menuHCloseAnimate
			}, cfg);
			if ($cover.length && $li.data(keys.childMenuStatusKey) !== "close") {
				$li.data(keys.childMenuStatusKey, "close");
				var $menu = $cover.children(),
					width = $cover.width();
				$cover.css({
					overflow: "hidden"
				});
				$menu.stop(true, false).delay(cfg.delay).animate({
					left: -width - 10
				}, cfg.time, cfg.animate, function() {
					$cover.css({
						width: ""
					}).hide()
				})
			}
			return false
		},
		_disabledBlock: function(status) {
			var $block = $(this);
			if (status) {
				$block.addClass(keys.itemDisabledClass)
			} else {
				$block.removeClass(keys.itemDisabledClass)
			}
		},
		_disabledItem: function(status) {
			var $li = $(this),
				$icon = $li.children("img." + keys.itemIconClass),
				cfg = $li.data(keys.itemConfigKey);
			if (status) {
				$li.addClass(keys.itemDisabledClass);
				if ($icon.length) {
					$icon.attr("src", cfg.disicon || cfg.icon)
				}
			} else {
				$li.removeClass(keys.itemDisabledClass);
				if ($icon.length) {
					$icon.attr("src", cfg.icon)
				}
			}
		},
		_generateIdentifier: function() {
			var options = methods.options.call(this, null),
				id = new Date().getTime();
			while (identifiers[id]) {
				id++
			}
			identifiers[id] = true;
			options._identifier = id
		}
	};
	$.fn.extend({
		navmenu: function() {
			var arg0 = arguments[0];
			if (methods[arg0]) {
				return methods[arg0].apply(this, Array.prototype.slice.call(arguments, 1))
			} else {
				if (typeof arg0 === "object" || !arg0) {
					return methods._init.apply(this, arguments)
				} else {
					$.error("Method " + arg0 + " does not exist on jquery.navmenu");
					return this
				}
			}
		}
	})
})(jQuery);