(function($) {
	$.topology.ui.AlarmTable = {
		Active : function(pId, options, tableOpts) {
			$.topology.ui.AlarmTable.tables[pId] = this;
			this.pId = pId;
			this.options = $.extend({
				beforeCancelAlarm : null,
				afterCancelAlarm : null,
				eventFilter : null
			}, options);
			this.tableOpts = tableOpts;
			this.ns = pId + "_";
			this.$alarmTable = null;
			this._init()
		},
		History : function(pId, options, tableOpts) {
			$.topology.ui.AlarmTable.tables[pId] = this;
			this.pId = pId;
			this.options = $.extend({
				beforeCancelAlarm : null,
				afterCancelAlarm : null,
				intId : null
			}, options);
			this.tableOpts = tableOpts;
			this.ns = pId + "_";
			this.$alarmTable = null;
			this._init()
		},
		activeAlarm : null,
		tables : {},
		existed : function($t) {
			var existed = $t.$alarmTable.parents("html").length !== 0;
			if (!existed) {
				delete $.topology.ui.AlarmTable.tables[this.pId]
			}
			return existed
		},
		selectElementEvents : function() {
			var $topo = $.topology, $selector = $topo.selector, isAll = false, eventIds = [];
			if ($selector.size() === 0) {
				isAll = true
			}
			if ($selector.size() === 1
					&& $topo.isView($selector.selected().focus)) {
				isAll = true
			}
			if (isAll) {
				if ($topo.view.type == 2) {
					for ( var id in $topo.events) {
						eventIds.push(id)
					}
				} else {
					for ( var id in $topo.events) {
						if ($topo.events[id].transfer == "0") {
							eventIds.push(id)
						}
					}
				}
			} else {
				var selected = $selector.selected(), obj = null;
				for ( var type in selected) {
					if (type === "focus") {
						continue
					}
					for (var i = 0, len = selected[type].length; i < len; i++) {
						obj = $topo.find(selected[type][i], type.substr(0,
								type.length - 1));
						if (obj && obj.eventIds
								&& $.type(obj.eventIds) === "array"
								&& obj.eventIds.length >= 1) {
							eventIds = eventIds.concat(obj.eventIds)
						}
					}
				}
			}
			eventIds = $.array.unique(eventIds);
			$.topology.ui.AlarmTable.activeAlarm.$alarmTable.filterById(
					eventIds, 500)
		},
		reqEventData : function(filterIds, callback) {
			$.topology.loadEvent(filterIds, {
				success : function() {
					var tables = $.topology.ui.AlarmTable.tables;
					for ( var pId in tables) {
						tables[pId].reload()
					}
					$.isFunction(callback) && callback()
				}
			})
		}
	};
	$.topology.ui.AlarmTable.Active.prototype = {
		getAlarmData : function() {
			return $.topology.events || {}
		},
		getAlarmStatistics : function(alarms) {
			var statistics = {
				total : 0
			};
			if (alarms) {
				var i, alarm, id;
				for (i = 0; i < alarms.length; i++) {
					alarm = alarms[i];
					id = alarm.id;
					if ($.isFunction(this.options.eventFilter)
							&& !this.options.eventFilter(id)) {
						continue
					}
					if (!statistics[alarm.level]) {
						statistics[alarm.level] = 0
					}
					statistics.total++;
					statistics[alarm.level]++
				}
			}
			return statistics
		},
		reload : function(alarmData) {
			if ($.topology.ui.AlarmTable.existed(this)) {
				var _alarmTableObj = this, $alarmTable = _alarmTableObj.$alarmTable;
				alarmData = alarmData || _alarmTableObj._getAlarmInfo();
				$alarmTable.fnClearTable();
				$alarmTable.fnAddData(alarmData.alarms);
				$alarmTable.filterById(".*", 500);
				$alarmTable.fnDraw();
				$alarmTable.fnAdjustColumnSizing(bRedraw = false)
			}
		},
		clear : function() {
			this.reload({
				statistics : {
					total : 0
				},
				alarms : []
			})
		},
		eventIdFilter : function(ids) {
			var rs = [];
			if (ids && $.isArray(ids)) {
				var _alarmTableObj = this, $alarmTable = _alarmTableObj.$alarmTable, data = $alarmTable
						.fnGetData();
				for (var i = 0; i < data.length; i++) {
					if ($.inArray(data[i].alarmId, ids) >= 0) {
						alert(data[i].alarmId);
						rs.push(data[i].alarmId)
					}
				}
				$.unique(rs)
			}
			return rs.length ? rs : null
		},
		_init : function() {
			var _alarmTableObj = this, $aContainer = $("#" + _alarmTableObj.pId)
					.addClass("alarmContainer");
			$(
					"<table><tr><td>告警共 <div class='alarmCount' id='"
							+ _alarmTableObj.ns
							+ "allAlarmCount'></div> 条</td>"
							+ "<td style='background-color:"
							+ $.converter.alarm(5).color + ";color:#fff;'>"
							+ $.converter.alarm(5).text
							+ " <div class='alarmCount' id='"
							+ _alarmTableObj.ns + "level5Count'></div> 条</td>"
							+ "<td style='background-color:"
							+ $.converter.alarm(4).color
							+ ";color:#fff;display:none'>"
							+ $.converter.alarm(4).text
							+ " <div class='alarmCount' id='"
							+ _alarmTableObj.ns + "level4Count'></div> 条</td>"
							+ "<td style='background-color:"
							+ $.converter.alarm(3).color + ";'>"
							+ $.converter.alarm(3).text
							+ " <div class='alarmCount' id='"
							+ _alarmTableObj.ns + "level3Count'></div> 条</td>"
							+ "<td style='background-color:"
							+ $.converter.alarm(2).color + ";'>"
							+ $.converter.alarm(2).text
							+ " <div class='alarmCount' id='"
							+ _alarmTableObj.ns
							+ "level2Count'></div> 条</td></tr></table>").attr(
					"id", _alarmTableObj.ns + "alarmStatistics").addClass(
					"alarmStatistics").appendTo($aContainer);
			$(
					"#" + _alarmTableObj.ns + "allAlarmCount,#"
							+ _alarmTableObj.ns + "level5Count,#"
							+ _alarmTableObj.ns + "level4Count,#"
							+ _alarmTableObj.ns + "level3Count,#"
							+ _alarmTableObj.ns + "level2Count")
					.each(
							function() {
								var $this = $(this), counter = new JSCounter.NumberCounter(
										$this.attr("id"), {
											start : 0,
											pretoken : false,
											comma : false,
											numberHeight : "12px",
											numberWidth : "12px",
											numberSize : "12px",
											delay : 100
										});
								counter.render();
								$this.data("counter", counter)
							});
			var $alarmTable = $("<table/>").attr("id",
					_alarmTableObj.ns + "alarmTable").addClass("alarmTable")
					.appendTo($aContainer);
			$alarmTable
					.dataTable($
							.extend(
									true,
									{
										"sDom" : '<"top"f>rt<"bottom"pl><"clear">',
										"bJQueryUI" : true,
										"sPaginationType" : "full_numbers",
										"aaData" : null,
										"fnDrawCallback" : function() {
											var _this = this;
											timerName = "statistics",
													timer = _this
															.data(timerName);
											if (timer) {
												clearTimeout(timer);
												_this.removeData(timerName)
											}
											_this
													.data(
															timerName,
															setTimeout(
																	function() {
																		_this
																				.removeData(timerName);
																		var $at = _this;
																		if ($at) {
																			var aoData = $at
																					._(
																							"tr",
																							{
																								"filter" : "applied"
																							}), alarmInfo = {
																				total : 0
																			};
																			if (aoData) {
																				$
																						.each(
																								aoData,
																								function(
																										i,
																										arr) {
																									var group = /(-?\d*\.?\d+)/
																											.exec(arr[1]);
																									if (group) {
																										if (!alarmInfo[group[1]]) {
																											alarmInfo[group[1]] = 0
																										}
																										alarmInfo.total++;
																										alarmInfo[group[1]]++
																									}
																								})
																			}
																			_alarmTableObj
																					._alarmStatistics(alarmInfo)
																		}
																	}, 250));
											$(
													"#" + _alarmTableObj.ns
															+ "alarmAllCheck")
													.prop("checked", false)
										},
										"aoColumns" : [
												{
													"mData" : "chk",
													"sTitle" : '<input id="'
															+ _alarmTableObj.ns
															+ 'alarmAllCheck" type="checkbox">',
													"bSortable" : false,
													"sClass" : "center",
													"sWidth" : "80px",
													"bSearchable" : false
												},
												{
													"mData" : "gradeText",
													"sTitle" : "告警级别",
													"sClass" : "center",
													"sWidth" : "100px",
													"sType" : "string",
													"fnCreatedCell" : function(
															nTd, sData, oData) {
														var alarmInfo = $.converter
																.alarm(parseInt(oData.grade))
																|| $.converter
																		.alarm(0);
														$(nTd)
																.css(
																		{
																			"border" : "1px solid #fff",
																			"background-color" : alarmInfo.color,
																			"text-shadow" : "0 0 5px #fff,0 0 10px #fff,0 0 15px #fff"
																		});
														oData[1] = oData.grade
																+ "\n" + sData
													}
												},
												{
													"mData" : "transferText",
													"sTitle" : "产生方式",
													"sWidth" : "100px",
													"sClass" : "center",
													"fnCreatedCell" : function(
															nTd, sData, oData) {
														$(nTd)
																.css(
																		{
																			"font-color" : parseInt(oData.transfer) === 1 ? "#999999"
																					: "#0f08cc"
																		})
													}
												},
												{
													"mData" : "ftime",
													"sTitle" : "首次告警时间",
													"bVisible" : false
												},
												{
													"mData" : "ltime",
													"sTitle" : "最近告警时间",
													"sClass" : "center",
													"sWidth" : undefined
												},
												{
													"mData" : "oname",
													"sTitle" : "告警网元",
													"sClass" : "center",
													"fnCreatedCell" : function(
															nTd, sData, arr) {
														_alarmTableObj
																._lengthLimit(
																		nTd,
																		sData,
																		{
																			1600 : 30,
																			1440 : 24,
																			1280 : 14,
																			1024 : 10
																		}[window.screen.width] || 20)
													}
												},
												{
													"mData" : "type",
													"sTitle" : "告警类型",
													"sClass" : "center"
												},
												{
													"mData" : "title",
													"sTitle" : "告警标题",
													"sClass" : "center",
													"fnCreatedCell" : function(
															nTd, sData) {
														_alarmTableObj
																._lengthLimit(
																		nTd,
																		sData,
																		{
																			1600 : 80,
																			1440 : 70,
																			1280 : 52,
																			1024 : 20
																		}[window.screen.width] || 60)
													}
												},
												{
													"mData" : "astatusText",
													"sTitle" : "确认状态",
													"sClass" : "center",
													"sWidth" : "80px",
													"bVisible" : $.topology.config.global["ack_alarm"] === "1"
												},
												{
													"mData" : "dsText",
													"sTitle" : "工单状态",
													"sClass" : "center",
													"sWidth" : "80px",
													"bVisible" : $.topology.config.global["workflow"] === "1"
												}, {
													"mData" : "text",
													"sTitle" : "告警正文",
													"bVisible" : false
												}, {
													"mData" : "ackuser",
													"sTitle" : "确认人",
													"bVisible" : false
												}, {
													"mData" : "acktime",
													"sTitle" : "确认时间",
													"bVisible" : false
												}, {
													"mData" : "ackmemo",
													"sTitle" : "确认描述",
													"bVisible" : false
												}, {
													"mData" : "detail",
													"sTitle" : "",
													"sClass" : "center",
													"sWidth" : "60px",
													"bSortable" : false,
													"bSearchable" : false
												}, {
													"mData" : "alarmId",
													"sTitle" : "",
													"bVisible" : false,
													"bSearchable" : false
												} ],
										"aaSorting" : [ [ 4, "desc" ],
												[ 1, "desc" ] ],
										"oLanguage" : {
											"sLengthMenu" : "每页告警数: _MENU_",
											"oPaginate" : {
												"sFirst" : "首页",
												"sLast" : "尾页",
												"sNext" : "下页",
												"sPrevious" : "上页"
											},
											"sEmptyTable" : "无 告 警",
											"sZeroRecords" : "无匹配结果",
											"sSearch" : "告警搜索",
											"sProcessing" : "加载中..."
										}
									}, _alarmTableObj.tableOpts));
			$alarmTable.filterById = function(ids, delay) {
				if (!ids) {
					return

				}
				var exp = "";
				if ($.isArray(ids)) {
					for (var i = 0; i < ids.length; i++) {
						exp += ids[i] + (i + 1 === ids.length ? "" : "|")
					}
				} else {
					if ($.type(ids) === "string") {
						exp = ids;
						ids = [ ids ]
					}
				}
				if (ids.length === 0) {
					exp = "^noevent$"
				}
				var $table = $alarmTable, timerName = "alarmfilter-delay-timer", timer = $table
						.data(timerName), alarmIdColIdx = 15;
				if (timer) {
					clearTimeout(timer);
					$table.removeData(timerName)
				}
				if (delay && Number(delay) > 0) {
					$table.data(timerName, setTimeout(function() {
						$table.removeData(timerName);
						$table.fnFilter(exp, alarmIdColIdx, true)
					}, delay))
				} else {
					$table.fnFilter(exp, alarmIdColIdx, true)
				}
			};
			$("#" + _alarmTableObj.ns + "alarmAllCheck").bind(
					"click",
					function(e) {
						var checked = $(this).prop("checked");
						$alarmTable.find(":checkbox[name='alarmchk']").prop(
								"checked", checked);
						e.stopPropagation()
					});
			$("#" + _alarmTableObj.ns + "alarmTable_filter").find(":text")
					.addClass("search");
			var $alarmOptions = $("<div/>").attr("id",
					_alarmTableObj.ns + "alarmOptions")
					.addClass("alarmOptions").appendTo($aContainer);
			var $cancelAlarmBtn = $("<input/>")
					.attr({
						id : _alarmTableObj.ns + "cancelAlarmSelected",
						type : "button",
						value : "取消选中告警"
					})
					.appendTo($alarmOptions)
					.button()
					.click(
							function() {
								var selectedAlarm = _alarmTableObj
										._getSelectedAlarm($alarmTable);
								if (selectedAlarm.length === 0) {
									return

								}
								if ($
										.isFunction(_alarmTableObj.options.beforeCancelAlarm)) {
									_alarmTableObj.options
											.beforeCancelAlarm(selectedAlarm)
								}
								setTimeout(
										function() {
											_alarmTableObj
													._removeAlarm(
															selectedAlarm,
															function() {
																$.topology.ui.AlarmTable
																		.reqEventData(
																				selectedAlarm,
																				function() {
																					if ($
																							.isFunction(_alarmTableObj.options.afterCancelAlarm)) {
																						_alarmTableObj.options
																								.afterCancelAlarm(selectedAlarm)
																					}
																				})
															});
											$.topology.ui.tooltip.data({
												event : true
											});
											$.topology.ui.tooltip4hang.data({
												event : true
											})
										}, 0)
							});
			var alarmActionBtns = $("#" + _alarmTableObj.ns
					+ "alarmOptions :button");
			if (alarmActionBtns.length === 1) {
				alarmActionBtns.first().addClass("onlyOneAlarmActionBtn")
			} else {
				$.each(alarmActionBtns, function(i, btn) {
					if (i === 0) {
						$(btn).addClass("firstAlarmActionBtn")
					} else {
						if (i === alarmActionBtns.length - 1) {
							$(btn).addClass("lastAlarmActionBtn");
							$(btn).css({
								"left" : (i * -2) + "px"
							})
						} else {
							$(btn).addClass("middleAlarmActionBtn");
							$(btn).css({
								"left" : (i * -2) + "px"
							})
						}
					}
				})
			}
			$alarmTable
					.delegate(
							".detailSwitcher",
							"click",
							function() {
								var $switcher = $(this), $nTr = $switcher
										.parents("tr:first"), nTr = $nTr[0];
								if ($alarmTable.fnIsOpen(nTr)) {
									$switcher.attr("title", "查看详情")
											.removeClass("alarmShrink")
											.addClass("alarmExpand");
									$nTr
											.next()
											.find("div.innerDetail")
											.slideUp(
													function() {
														$alarmTable
																.fnClose(nTr);
														$alarmTable
																.fnAdjustColumnSizing(bRedraw = false)
													})
								} else {
									$switcher.attr("title", "隐藏详情")
											.removeClass("alarmExpand")
											.addClass("alarmShrink");
									var dTr = $alarmTable.fnOpen(nTr,
											_alarmTableObj._alarmDetails(
													$alarmTable, nTr),
											"alarmDetail");
									$("div.innerDetail", dTr)
											.slideDown(
													function() {
														$alarmTable
																.fnAdjustColumnSizing(bRedraw = false)
													})
								}
							});
			_alarmTableObj.$alarmTable = $alarmTable;
			return $alarmTable
		},
		_getAlarmInfo : function() {
			var alarmsMap = this.getAlarmData(), rs = {
				alarms : []
			}, id = null, alarm = null, tmp = [], getDateStr = function(ms) {
				var date = new Date();
				date.setTime(ms);
				return $.date.dateFormat(date)
			};
			for (id in alarmsMap) {
				if ($.isFunction(this.options.eventFilter)
						&& !this.options.eventFilter(id)) {
					continue
				}
				alarm = alarmsMap[id];
				rs.alarms
						.push({
							chk : "<input name='alarmchk' class='alarmchk' type='checkbox' value='"
									+ alarm.id + "'>",
							grade : alarm.level,
							gradeText : $.converter
									.alarm(parseInt(alarm.level)).text
									|| $.converter.alarm(0).text,
							transfer : alarm.transfer,
							transferText : parseInt(alarm.transfer) === 1 ? "传递得到"
									: "自身发生",
							ftime : getDateStr(alarm.ft),
							ltime : getDateStr(alarm.lt),
							oname : alarm.oname,
							type : alarm.type,
							title : alarm.title,
							text : alarm.text,
							ds : alarm.ds,
							dsText : parseInt(alarm.ds) === -1 ? "未派单" : "已派单",
							astatus : alarm.as,
							astatusText : alarm.as === "2" ? "已确认" : "未确认",
							ackuser : alarm.au,
							acktime : alarm.at,
							ackmemo : alarm.am,
							detail : "<div class='detailSwitcher alarmExpand' title='查看详情'></div>",
							alarmId : alarm.id,
							symbols : alarm.symbols,
							lines : alarm.lines
						});
				tmp.push(alarm)
			}
			rs.statistics = this.getAlarmStatistics(tmp);
			return rs
		},
		_alarmStatistics : function(info) {
			try {
				$("#" + this.ns + "allAlarmCount").data("counter").setNumber(
						info.total);
				$("#" + this.ns + "level5Count").data("counter").setNumber(
						info[5] || 0);
				$("#" + this.ns + "level4Count").data("counter").setNumber(
						info[4] || 0);
				$("#" + this.ns + "level3Count").data("counter").setNumber(
						info[3] || 0);
				$("#" + this.ns + "level2Count").data("counter").setNumber(
						info[2] || 0)
			} catch (e) {
			}
		},
		_removeAlarm : function(ids, callback) {
			var rows = [], _alarmTableObj = this, $alarmTable = _alarmTableObj.$alarmTable, $aContainer = $("#"
					+ this.pId);
			$.each(ids, function(idx, val) {
				var $chk = $alarmTable.find(":checkbox[value='" + val + "']");
				if ($chk.length) {
					rows.push($chk.parent().parent()[0])
				}
			});
			$
					.each(
							rows,
							function(idx, row) {
								var $row = $(row), $detail = null, $thead = $row
										.parents("table:first").children(
												"thead").clone(false, true), $table = $(
										"<table/>").append($thead).append(
										$row.clone(false, true)), isOpen = $alarmTable
										.fnIsOpen(row), ladder = 80, delay1 = idx
										* ladder, delay2 = (rows.length - idx - 1)
										* ladder;
								$row.css("visibility", "hidden");
								if (isOpen) {
									$detail = $row.next();
									$table.append($detail.clone(false, true));
									$detail.css("visibility", "hidden")
								}
								$table.addClass("animateTable dataTable").css({
									position : "absolute",
									top : $row.position().top,
									left : "0%",
									width : $alarmTable.width()
								});
								$aContainer.find(".dataTables_scrollBody")
										.append($table);
								$table
										.delay(delay1)
										.animate(
												{
													left : "100%",
													opacity : 0
												},
												300,
												function() {
													var removeRow = function(
															$tr, callback) {
														var count = 0;
														$tr
																.children()
																.each(
																		function() {
																			count += ($(
																					this)
																					.attr(
																							"colspan") || 1)
																		});
														var $td = $("<td/>")
																.attr(
																		"colspan",
																		count)
																.css(
																		{
																			"padding-top" : 0,
																			"padding-bottom" : 0
																		}), $div = $(
																"<div/>")
																.height(
																		$tr
																				.height())
																.appendTo($td);
														$tr.empty().append($td);
														$div
																.delay(delay2)
																.animate({
																	height : 0
																}, 200,
																		callback)
													};
													if (isOpen) {
														removeRow($row.next())
													}
													removeRow(
															$row,
															function() {
																if (idx + 1 === rows.length) {
																	setTimeout(
																			function() {
																				$
																						.each(
																								rows,
																								function(
																										index,
																										row) {
																									$alarmTable
																											.fnDeleteRow(row)
																								});
																				if ($
																						.isFunction(callback)) {
																					callback()
																				}
																			},
																			0)
																}
															})
												})
							})
		},
		_lengthLimit : function(nTd, sData, maxLength) {
			if (sData.length > maxLength) {
				var $td = $(nTd);
				$td.html(sData.substring(0, maxLength) + "...").attr("title",
						sData)
			}
		},
		_alarmDetails : function(oTable, nTr) {
			var aData = oTable.fnGetData(nTr), _html;
			_html = "<div class='innerDetail'><table>"
					+ "<tr><td>首次告警时间: </td><td>" + aData.ftime + "</td></tr>"
					+ "<tr><td>告警正文: </td><td>" + aData.text + "</td></tr>";
			if ($.topology.config.global["ack_alarm"] === "1"
					&& aData.astatus === "2") {
				_html += "<tr><td>确认人: </td><td>"
						+ (aData.ackuser || "未知")
						+ "</td></tr>"
						+ "<tr><td>确认时间: </td><td>"
						+ $.date.dateFormat($.date.long2Date(aData.acktime),
								$.date.masks.isoDateTime) + "</td></tr>"
						+ "<tr><td>确认描述: </td><td>" + aData.ackmemo
						+ "</td></tr>"
			}
			_html += "</table></div>";
			return _html
		},
		_getSelectedAlarm : function(oTable) {
			var selectedAlarm = [];
			oTable.find(":checkbox[name='alarmchk']").each(function() {
				var $chk = $(this);
				$chk.prop("checked") && selectedAlarm.push($chk.val())
			});
			return selectedAlarm
		}
	};

	function initAlarmTable() {
		var alarmTableObj = new $.topology.ui.AlarmTable.Active(
				"alarmTableContainer",
				null,
				{
					sScrollY : $.topology.ui.innerLayout ? $.topology.ui.innerLayout.state.south.size - 82
							: 78
				});
		var alarmTableReload = alarmTableObj.reload;
		alarmTableObj.reload = function(data) {
			alarmTableReload.call(this, data);
			$.topology.ui.AlarmTable.selectElementEvents()
		};
		$.topology.ui.AlarmTable.activeAlarm = alarmTableObj
	}
	function showWarnDialog(info, xhr, status, options) {
		$.jAlert($.extend({
			type : "warn",
			content : $.converter.requestError(xhr, status) + " [" + info + "]"
		}, options))
	}
	initAlarmTable()
})(jQuery);